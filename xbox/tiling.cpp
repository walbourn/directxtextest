//-------------------------------------------------------------------------------------
// tiling.cpp
//  
// Copyright (c) Microsoft Corporation.
//-------------------------------------------------------------------------------------

#include "directxtest.h"

#include "DirectXTex.h"
#include "DirectXTexXbox.h"

#ifdef __clang__
#pragma clang diagnostic ignored "-Wcovered-switch-default"
#pragma clang diagnostic ignored "-Wswitch-enum"
#pragma clang diagnostic ignored "-Wswitch"
#endif

using namespace DirectX;

struct TestMedia
{
    const wchar_t *fname;
    bool mipsgen;
};

static const TestMedia g_TestMedia[] = 
{
{ MEDIA_PATH L"fishingboat.jpg" },
{ MEDIA_PATH L"lena.jpg" },
{ MEDIA_PATH L"baboon.tiff" },
{ MEDIA_PATH L"f16.tiff" },
{ MEDIA_PATH L"peppers.tiff" },
{ MEDIA_PATH L"pentagon.tiff" },

{ MEDIA_PATH L"fishingboat.jpg", true },
{ MEDIA_PATH L"lena.jpg", true },
{ MEDIA_PATH L"baboon.tiff", true },
{ MEDIA_PATH L"f16.tiff", true },
{ MEDIA_PATH L"peppers.tiff", true },
{ MEDIA_PATH L"pentagon.tiff", true },

{ MEDIA_PATH L"AlphaEdge.dds" },

{ MEDIA_PATH L"test8888.dds" },
{ MEDIA_PATH L"test8888mip.dds" },
{ MEDIA_PATH L"testcube8888.dds" },
{ MEDIA_PATH L"testcube8888mip.dds" },
{ MEDIA_PATH L"testcubedxt5.dds" },
{ MEDIA_PATH L"testcubedxt5mip.dds" },
{ MEDIA_PATH L"testdxt1.dds" },
{ MEDIA_PATH L"testdxt1mip.dds" },
{ MEDIA_PATH L"testvol8888.dds" },
{ MEDIA_PATH L"testvol8888mip.dds" },
{ MEDIA_PATH L"testvoldxt1mip.dds" },
{ MEDIA_PATH L"testvolip.dds" },
{ MEDIA_PATH L"test555.dds" },

{ MEDIA_PATH L"tex_dxt1.DDS" },
{ MEDIA_PATH L"tex_dxt3.DDS" },
{ MEDIA_PATH L"tex_dxt5.DDS" },

{ MEDIA_PATH L"reftexture.dds" },
{ MEDIA_PATH L"windowslogo_A8L8.dds" },
{ MEDIA_PATH L"windowslogo_A1R5G5B5.dds" },
{ MEDIA_PATH L"windowslogo_DXT3.dds" },
{ MEDIA_PATH L"windowslogo_L16.dds" },
{ MEDIA_PATH L"windowslogo_L8.dds" },
{ MEDIA_PATH L"windowslogo_R5G6B5.dds" },
{ MEDIA_PATH L"windowslogo_X8B8G8R8.dds" },
{ MEDIA_PATH L"windowslogo_X8R8G8B8.dds" },
{ MEDIA_PATH L"windowslogo_X4R4G4B4.dds" },
{ MEDIA_PATH L"windowslogo_A4R4G4B4.dds" },
{ MEDIA_PATH L"windowslogo_r16f.dds" },
{ MEDIA_PATH L"windowslogo_r32f.dds" },
{ MEDIA_PATH L"windowslogo_rgb565.dds" },
{ MEDIA_PATH L"windowslogo_rgba16.dds" },
{ MEDIA_PATH L"windowslogo_rgba16f.dds" },
{ MEDIA_PATH L"windowslogo_rgba32f.dds" },
{ MEDIA_PATH L"earth_A2B10G10R10.dds" },
{ MEDIA_PATH L"earth_A2R10G10B10.dds" },
{ MEDIA_PATH L"earthdiffuse.dds" },

{ MEDIA_PATH L"dx5_logo.dds" },
{ MEDIA_PATH L"win95.dds" },
{ MEDIA_PATH L"lena.dds" },
{ MEDIA_PATH L"lobbycube.dds" },

{ MEDIA_PATH L"io_A8_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_A8_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_A8_UNORM_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_A8_UNORM_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_A8_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_A8_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_A8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_A8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_A8_UNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_A8_UNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_A8_UNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_A8_UNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_BC1_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_BC1_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_BC1_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_BC1_UNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_BC1_UNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_BC1_UNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_BC1_UNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_BC1_UNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_BC2_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_BC2_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_BC2_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_BC2_UNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_BC2_UNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_BC2_UNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_BC2_UNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_BC2_UNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_BC3_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_BC3_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_BC3_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_BC3_UNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_BC3_UNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_BC3_UNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_BC3_UNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_BC3_UNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_BC4_SNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_BC4_SNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_BC4_SNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_BC4_SNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_BC4_SNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_BC4_SNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_BC4_SNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_BC4_SNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_BC4_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_BC4_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_BC4_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_BC4_UNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_BC4_UNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_BC4_UNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_BC4_UNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_BC4_UNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_BC5_SNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_BC5_SNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_BC5_SNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_BC5_SNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_BC5_SNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_BC5_SNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_BC5_SNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_BC5_SNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_BC5_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_BC5_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_BC5_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_BC5_UNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_BC5_UNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_BC5_UNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_BC5_UNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_BC5_UNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
#ifdef _USE_SCARLETT
// Known bugs for packed format tiling on Gen8
{ MEDIA_PATH L"io_G8R8_G8B8_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_G8R8_G8B8_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_G8R8_G8B8_UNORM_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_G8R8_G8B8_UNORM_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_G8R8_G8B8_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_G8R8_G8B8_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_G8R8_G8B8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_G8R8_G8B8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_G8R8_G8B8_UNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_G8R8_G8B8_UNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_G8R8_G8B8_UNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_G8R8_G8B8_UNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
#endif
{ MEDIA_PATH L"io_R10G10B10A2_UINT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UINT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UINT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UINT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UINT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UINT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UINT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UINT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UINT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UINT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UINT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UNORM_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UNORM_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R10G10B10A2_UNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
#if 0
// BUGBUG - these images contain FP specials!
{ MEDIA_PATH L"io_R16G16B16A16_FLOAT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_FLOAT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_FLOAT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_FLOAT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_FLOAT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_FLOAT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_FLOAT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_FLOAT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_FLOAT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_FLOAT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
#endif
{ MEDIA_PATH L"io_R16G16B16A16_SINT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SINT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SINT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SINT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SINT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SINT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SINT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SINT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SINT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SINT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SINT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SNORM_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SNORM_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SNORM_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SNORM_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_SNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UINT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UINT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UINT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UINT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UINT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UINT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UINT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UINT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UINT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UINT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UINT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UNORM_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UNORM_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16B16A16_UNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
#if 0
// BUGBUG - these images contain FP specials!
{ MEDIA_PATH L"io_R16G16_FLOAT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_FLOAT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_FLOAT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_FLOAT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_FLOAT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_FLOAT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_FLOAT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_FLOAT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_FLOAT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_FLOAT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
#endif
{ MEDIA_PATH L"io_R16G16_SINT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_SINT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_SINT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_SINT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_SINT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_SINT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_SINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_SINT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_SINT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_SINT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_SINT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_SINT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_SNORM_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_SNORM_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_SNORM_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_SNORM_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_SNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_SNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_SNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_SNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_SNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_SNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_SNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_SNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_UINT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_UINT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_UINT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_UINT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_UINT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_UINT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_UINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_UINT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_UINT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_UINT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_UINT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_UINT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_UNORM_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_UNORM_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_UNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_UNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_UNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16G16_UNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R16G16_UNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
#if 0
// BUGBUG - these images contain FP specials!
{ MEDIA_PATH L"io_R16_FLOAT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_FLOAT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_FLOAT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_FLOAT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_FLOAT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_FLOAT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_FLOAT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_FLOAT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_FLOAT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_FLOAT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
#endif
{ MEDIA_PATH L"io_R16_SINT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_SINT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_SINT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_SINT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_SINT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_SINT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_SINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_SINT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_SINT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_SINT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_SINT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_SINT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_SNORM_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_SNORM_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_SNORM_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_SNORM_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_SNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_SNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_SNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_SNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_SNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_SNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_SNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_SNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_UINT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_UINT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_UINT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_UINT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_UINT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_UINT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_UINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_UINT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_UINT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_UINT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_UINT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_UINT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_UNORM_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_UNORM_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_UNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_UNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_UNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R16_UNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R16_UNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_FLOAT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_FLOAT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_FLOAT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_FLOAT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_FLOAT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_FLOAT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_FLOAT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_FLOAT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_FLOAT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_FLOAT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_UINT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_UINT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_UINT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_UINT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_UINT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_UINT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_UINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_UINT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_UINT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_UINT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_UINT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32A32_UINT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32_FLOAT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32_FLOAT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32_FLOAT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32_FLOAT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32_FLOAT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32_FLOAT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32_FLOAT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32_FLOAT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32_FLOAT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32_FLOAT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R32_FLOAT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R32_FLOAT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R32_FLOAT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R32_FLOAT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R32_FLOAT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R32_FLOAT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R32_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R32_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R32_FLOAT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R32_FLOAT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R32_FLOAT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R32_FLOAT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SINT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SINT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SINT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SINT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SINT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SINT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SINT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SINT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SINT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SINT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SINT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SNORM_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SNORM_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SNORM_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SNORM_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_SNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UINT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UINT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UINT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UINT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UINT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UINT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UINT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UINT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UINT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UINT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UINT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRGB_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRGB_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRGB_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRGB_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRGB_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRGB_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRGB_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRGB_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRGB_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRGB_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRGB_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRGB_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8B8A8_UNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
#ifdef _USE_SCARLETT
// Known bugs for packed format tiling on Gen8
{ MEDIA_PATH L"io_R8G8_B8G8_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_B8G8_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_B8G8_UNORM_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_B8G8_UNORM_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_B8G8_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_B8G8_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_B8G8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_B8G8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_B8G8_UNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_B8G8_UNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_B8G8_UNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_B8G8_UNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
#endif
{ MEDIA_PATH L"io_R8G8_SINT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_SINT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_SINT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_SINT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_SINT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_SINT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_SINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_SINT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_SINT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_SINT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_SINT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_SINT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_SNORM_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_SNORM_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_SNORM_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_SNORM_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_SNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_SNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_SNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_SNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_SNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_SNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_SNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_SNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_UINT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_UINT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_UINT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_UINT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_UINT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_UINT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_UINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_UINT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_UINT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_UINT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_UINT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_UINT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_UNORM_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_UNORM_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_UNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_UNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8G8_UNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R8G8_UNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_SINT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_SINT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_SINT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_SINT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_SINT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_SINT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_SINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_SINT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_SINT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_SINT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_SINT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_SINT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_SNORM_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_SNORM_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_SNORM_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_SNORM_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_SNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_SNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_SNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_SNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_SNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_SNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_SNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_SNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_UINT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_UINT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_UINT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_UINT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_UINT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_UINT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_UINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_UINT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_UINT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_UINT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_UINT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_UINT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_UNORM_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_UNORM_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_UNORM_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_UNORM_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_UNORM_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_UNORM_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R8_UNORM_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R8_UNORM_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },

#if 0
// 96bpp formats are not supported by Xbox One XDK
{ MEDIA_PATH L"io_R32G32B32_FLOAT_SRV_DIMENSION_TEXTURE1DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32_FLOAT_SRV_DIMENSION_TEXTURE1DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32_FLOAT_SRV_DIMENSION_TEXTURE1D_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32_FLOAT_SRV_DIMENSION_TEXTURE1D_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32_FLOAT_SRV_DIMENSION_TEXTURE2DArray_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32_FLOAT_SRV_DIMENSION_TEXTURE2DArray_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32_FLOAT_SRV_DIMENSION_TEXTURE3D_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32_FLOAT_SRV_DIMENSION_TEXTURE3D_MipOn.DDS" },
{ MEDIA_PATH L"io_R32G32B32_FLOAT_SRV_DIMENSION_TEXTURECube_MipOff.DDS" },
{ MEDIA_PATH L"io_R32G32B32_FLOAT_SRV_DIMENSION_TEXTURECube_MipOn.DDS" },
#endif

{ MEDIA_PATH L"tree02S.dds" },
{ MEDIA_PATH L"tree02S_pmalpha.dds" },

{ MEDIA_PATH L"SplashScreen2.dds" },

{ MEDIA_PATH L"normals.dds" },
{ MEDIA_PATH L"normalmap.dds" },
{ MEDIA_PATH L"Heightmap.dds" },

{ MEDIA_PATH L"hdrtest.dds" },
{ MEDIA_PATH L"BC6H_SF16.DDS" },
{ MEDIA_PATH L"BC6H_UF16.DDS" },
{ MEDIA_PATH L"BC7_UNORM.DDS" },
{ MEDIA_PATH L"BC7_UNORM_SRGB.DDS" },

{ MEDIA_PATH L"World8192.dds" },

{ MEDIA_PATH L"spnza_bricks_a.DDS" },
{ MEDIA_PATH L"spnza_bricks_a_normal.DDS" },
{ MEDIA_PATH L"spnza_bricks_a_specular.DDS" },

{ MEDIA_PATH L"Atrium_diffuseIBL.dds" },
{ MEDIA_PATH L"Atrium_specularIBL.dds" },

{ MEDIA_PATH L"Sphere2Mat_baseColor.DDS" },
{ MEDIA_PATH L"Sphere2Mat_emissive.DDS" },
{ MEDIA_PATH L"Sphere2Mat_normal.DDS" },
{ MEDIA_PATH L"Sphere2Mat_occlusionRoughnessMetallic.DDS" }

};

extern const wchar_t* GetName( DXGI_FORMAT fmt );

//-------------------------------------------------------------------------------------
// Tile/Detile
bool Test07()
{
    bool success = true;

    size_t ncount = 0;
    size_t npass = 0;

    for (size_t index = 0; index < std::size(g_TestMedia); ++index)
    {
        WCHAR szPath[MAX_PATH];
        ExpandEnvironmentStringsW(g_TestMedia[index].fname, szPath, MAX_PATH);

#ifdef _DEBUG
        OutputDebugString(szPath);
        OutputDebugStringA("\n");
#endif

        WCHAR ext[_MAX_EXT];
        WCHAR fname[_MAX_FNAME];
        _wsplitpath_s(szPath, NULL, 0, NULL, 0, fname, _MAX_FNAME, ext, _MAX_EXT);

        TexMetadata metadata;
        ScratchImage image;
        HRESULT hr;

        if (_wcsicmp(ext, L".dds") == 0)
        {
            hr = LoadFromDDSFile(szPath, DDS_FLAGS_NONE, &metadata, image);
        }
        else
        {
            hr = LoadFromWICFile(szPath, WIC_FLAGS_NONE, &metadata, image);
        }

        if (g_TestMedia[index].mipsgen)
        {
            if (SUCCEEDED(hr))
            {
                ScratchImage timage = std::move(image);

                hr = GenerateMipMaps(*timage.GetImage(0, 0, 0), TEX_FILTER_DEFAULT, 0, image);
                if (SUCCEEDED(hr))
                {
                    metadata.mipLevels = image.GetMetadata().mipLevels;
                }
            }
        }

        if (FAILED(hr))
        {
            success = false;
            printe("Failed loading image from memory (HRESULT %08X):\n%ls\n", static_cast<unsigned int>(hr), szPath);
        }
        else
        {
#if _DEBUG
            char buff[128] = {};
            sprintf_s(buff, "\t%zu by %zu by %zu, %zu mips, %ls\n",
                metadata.width, metadata.height, (metadata.IsVolumemap()) ? metadata.depth : metadata.arraySize, metadata.mipLevels, GetName(metadata.format));
            OutputDebugStringA(buff);
#endif
            bool pass = true;

            Xbox::XboxImage xbox;

            // Test defaults
            hr = Xbox::Tile(image.GetImages(), image.GetImageCount(), metadata, xbox);

            if (FAILED(hr))
            {
                success = false;
                pass = false;
                printe("Failed tiling image (HRESULT %08X):\n%ls\n", static_cast<unsigned int>(hr), szPath);
            }
            else if (!xbox.GetPointer() || !xbox.GetSize() || !xbox.GetAlignment() || (xbox.GetTileMode() == -1))
            {
                success = false;
                pass = false;
                printe("Invalid tiled image:\n%ls\n", szPath);
            }
            else if (memcmp(&xbox.GetMetadata(), &metadata, sizeof(TexMetadata)) != 0)
            {
                success = false;
                pass = false;
                printe("Metadata error in xbox image:\n%ls\n", szPath);
                printmeta(&xbox.GetMetadata());
                printmetachk(&metadata);
            }
            else
            {
                ScratchImage image2;
                hr = Xbox::Detile(xbox, image2);
                if (FAILED(hr))
                {
                    success = false;
                    pass = false;
                    printe("Failed detiling image (HRESULT %08X):\n%ls\n", static_cast<unsigned int>(hr), szPath);
                }
                else if (memcmp(&image2.GetMetadata(), &metadata, sizeof(TexMetadata)) != 0)
                {
                    success = false;
                    pass = false;
                    printe("Metadata error tiled vs. detiled:\n%ls\n", szPath);
                    printmetachk(&image2.GetMetadata());
                    printmeta(&metadata);
                }
                else if (image.GetImageCount() != image2.GetImageCount())
                {
                    success = false;
                    pass = false;
                    printe("Image count mismatch (%zu ... %zu):\n%ls\n", image.GetImageCount(), image2.GetImageCount(), szPath);
                }
                else
                {
                    size_t j = 0;
                    for (; j < image.GetImageCount(); ++j)
                    {
                        const Image& img1 = image.GetImages()[j];
                        const Image& img2 = image2.GetImages()[j];

                        if (img1.width != img2.width
                            || img1.height != img2.height
                            || img1.format != img2.format)
                        {
                            success = false;
                            pass = false;
                            printe("Image mismatch [%zu]:\n%ls\n", j, szPath);
                            break;
                        }
                        else
                        {
                            float mse, mseV[4];
                            hr = ComputeMSE(img1, img2, mse, mseV);
                            if (FAILED(hr))
                            {
                                success = false;
                                pass = false;
                                printe("Failed comparing [%zu] (HRESULT %08X):\n%ls\n", j, static_cast<unsigned int>(hr), szPath);
                                break;
                            }

                            float targmse = 0.0002f;
                            switch (img1.format)
                            {
                            case DXGI_FORMAT_R32G32B32A32_UINT:
                            case DXGI_FORMAT_R32G32B32A32_SINT:
                            case DXGI_FORMAT_R32G32B32_UINT:
                            case DXGI_FORMAT_R32G32B32_SINT:
                            case DXGI_FORMAT_R16G16B16A16_UINT:
                            case DXGI_FORMAT_R16G16B16A16_SINT:
                            case DXGI_FORMAT_R32G32_UINT:
                            case DXGI_FORMAT_R32G32_SINT:
                            case DXGI_FORMAT_R10G10B10A2_UINT:
                            case DXGI_FORMAT_R8G8B8A8_UINT:
                            case DXGI_FORMAT_R8G8B8A8_SINT:
                            case DXGI_FORMAT_R16G16_UINT:
                            case DXGI_FORMAT_R16G16_SINT:
                            case DXGI_FORMAT_R32_UINT:
                            case DXGI_FORMAT_R32_SINT:
                            case DXGI_FORMAT_R8G8_UINT:
                            case DXGI_FORMAT_R8G8_SINT:
                            case DXGI_FORMAT_R16_UINT:
                            case DXGI_FORMAT_R16_SINT:
                            case DXGI_FORMAT_R8_SINT:
                                targmse = 1.6f;
                                break;
                            }

                            if (mse > targmse)
                            {
                                success = false;
                                pass = false;
                                printe("Data mismatch (%zu) %f [%f %f %f %f] ... %f\n%ls\n", j,
                                    mse, mseV[0], mseV[1], mseV[2], mseV[3], targmse, szPath);
                                break;
                            }
                        }
                    }
                }
            }

            // Force linear (if default wasn't doing this already)
            if (!IsCompressed(metadata.format) && (xbox.GetTileMode() != Xbox::c_XboxTileModeLinear))
            {
                hr = Xbox::Tile(image.GetImages(), image.GetImageCount(), metadata, xbox, Xbox::c_XboxTileModeLinear);

                if (FAILED(hr))
                {
                    success = false;
                    pass = false;
                    printe("Failed LINEAR tiling image (HRESULT %08X):\n%ls\n", static_cast<unsigned int>(hr), szPath);
                }
                else if (!xbox.GetPointer() || !xbox.GetSize() || !xbox.GetAlignment() || (xbox.GetTileMode() == -1))
                {
                    success = false;
                    pass = false;
                    printe("Invalid LINEAR tiled image:\n%ls\n", szPath);
                }
                else if (xbox.GetTileMode() != Xbox::c_XboxTileModeLinear)
                {
                    success = false;
                    pass = false;
                    printe("Ignored LINEAR tiled linear parameter:\n%ls\n", szPath);
                }
                else if (memcmp(&xbox.GetMetadata(), &metadata, sizeof(TexMetadata)) != 0)
                {
                    success = false;
                    pass = false;
                    printe("Metadata error in LINEAR xbox image:\n%ls\n", szPath);
                    printmeta(&xbox.GetMetadata());
                    printmetachk(&metadata);
                }
                else
                {
                    ScratchImage image2;
                    hr = Xbox::Detile(xbox, image2);
                    if (FAILED(hr))
                    {
                        success = false;
                        pass = false;
                        printe("Failed LINEAR detiling image (HRESULT %08X):\n%ls\n", static_cast<unsigned int>(hr), szPath);
                    }
                    else if (memcmp(&image2.GetMetadata(), &metadata, sizeof(TexMetadata)) != 0)
                    {
                        success = false;
                        pass = false;
                        printe("Metadata error LINEAR tiled vs. detiled:\n%ls\n", szPath);
                        printmetachk(&image2.GetMetadata());
                        printmeta(&metadata);
                    }
                    else if (image.GetImageCount() != image2.GetImageCount())
                    {
                        success = false;
                        pass = false;
                        printe("Image count mismatch LINEAR (%zu ... %zu):\n%ls\n", image.GetImageCount(), image2.GetImageCount(), szPath);
                    }
                    else
                    {
                        size_t j = 0;
                        for (; j < image.GetImageCount(); ++j)
                        {
                            const Image& img1 = image.GetImages()[j];
                            const Image& img2 = image2.GetImages()[j];

                            if (img1.width != img2.width
                                || img1.height != img2.height
                                || img1.format != img2.format)
                            {
                                success = false;
                                pass = false;
                                printe("Image mismatch LINEAR [%zu]:\n%ls\n", j, szPath);
                                break;
                            }
                            else
                            {
                                float mse, mseV[4];
                                hr = ComputeMSE(img1, img2, mse, mseV);
                                if (FAILED(hr))
                                {
                                    success = false;
                                    pass = false;
                                    printe("Failed comparing LINEAR [%zu] (HRESULT %08X):\n%ls\n", j, static_cast<unsigned int>(hr), szPath);
                                    break;
                                }

                                float targmse = 0.0002f;
                                switch (img1.format)
                                {
                                case DXGI_FORMAT_R32G32B32A32_UINT:
                                case DXGI_FORMAT_R32G32B32A32_SINT:
                                case DXGI_FORMAT_R32G32B32_UINT:
                                case DXGI_FORMAT_R32G32B32_SINT:
                                case DXGI_FORMAT_R16G16B16A16_UINT:
                                case DXGI_FORMAT_R16G16B16A16_SINT:
                                case DXGI_FORMAT_R32G32_UINT:
                                case DXGI_FORMAT_R32G32_SINT:
                                case DXGI_FORMAT_R10G10B10A2_UINT:
                                case DXGI_FORMAT_R8G8B8A8_UINT:
                                case DXGI_FORMAT_R8G8B8A8_SINT:
                                case DXGI_FORMAT_R16G16_UINT:
                                case DXGI_FORMAT_R16G16_SINT:
                                case DXGI_FORMAT_R32_UINT:
                                case DXGI_FORMAT_R32_SINT:
                                case DXGI_FORMAT_R8G8_UINT:
                                case DXGI_FORMAT_R8G8_SINT:
                                case DXGI_FORMAT_R16_UINT:
                                case DXGI_FORMAT_R16_SINT:
                                case DXGI_FORMAT_R8_SINT:
                                    targmse = 1.6f;
                                    break;
                                }

                                if (mse > targmse)
                                {
                                    success = false;
                                    pass = false;
                                    printe("Data mismatch LINEAR (%zu) %f [%f %f %f %f] ... %f\n%ls\n", j,
                                        mse, mseV[0], mseV[1], mseV[2], mseV[3], targmse, szPath);
                                    break;
                                }
                            }
                        }
                    }
                }
            }

            // Test TYPELESS
            TexMetadata tempmetadata = metadata;
            tempmetadata.format = MakeTypeless(metadata.format);
            if (IsTypeless(tempmetadata.format))
            {
                image.OverrideFormat(tempmetadata.format);

                hr = Xbox::Tile(image.GetImages(), image.GetImageCount(), tempmetadata, xbox);

                if (FAILED(hr))
                {
                    success = false;
                    pass = false;
                    printe("Failed TYPELESS tiling image (HRESULT %08X):\n%ls\n", static_cast<unsigned int>(hr), szPath);
                }
                else if (!xbox.GetPointer() || !xbox.GetSize() || !xbox.GetAlignment() || (xbox.GetTileMode() == -1))
                {
                    success = false;
                    pass = false;
                    printe("Invalid TYPELESS tiled image:\n%ls\n", szPath);
                }
                else if (memcmp(&xbox.GetMetadata(), &tempmetadata, sizeof(TexMetadata)) != 0)
                {
                    success = false;
                    pass = false;
                    printe("Metadata error in TYPELESS xbox image:\n%ls\n", szPath);
                    printmeta(&xbox.GetMetadata());
                    printmetachk(&tempmetadata);
                }
                else
                {
                    ScratchImage image2;
                    hr = Xbox::Detile(xbox, image2);
                    if (FAILED(hr))
                    {
                        success = false;
                        pass = false;
                        printe("Failed TYPELESS detiling image (HRESULT %08X):\n%ls\n", static_cast<unsigned int>(hr), szPath);
                    }
                    else if (memcmp(&image2.GetMetadata(), &tempmetadata, sizeof(TexMetadata)) != 0)
                    {
                        success = false;
                        pass = false;
                        printe("Metadata error TYPELESS tiled vs. detiled:\n%ls\n", szPath);
                        printmetachk(&image2.GetMetadata());
                        printmeta(&tempmetadata);
                    }
                    else if (image.GetImageCount() != image2.GetImageCount())
                    {
                        success = false;
                        pass = false;
                        printe("Image count mismatch TYPELESS (%zu ... %zu):\n%ls\n", image.GetImageCount(), image2.GetImageCount(), szPath);
                    }
                    else
                    {
                        size_t j = 0;
                        for (; j < image.GetImageCount(); ++j)
                        {
                            const Image& img1 = image.GetImages()[j];
                            const Image& img2 = image2.GetImages()[j];

                            if (img1.width != img2.width
                                || img1.height != img2.height
                                || img1.format != img2.format
                                || img1.rowPitch != img2.rowPitch)
                            {
                                success = false;
                                pass = false;
                                printe("Image mismatch TYPELESS [%zu]:\n%ls\n", j, szPath);
                                break;
                            }
                            else
                            {
                                bool mismatch = false;

                                const uint8_t* ptr1 = img1.pixels;
                                const uint8_t* ptr2 = img2.pixels;

                                size_t rowPitch = img1.rowPitch;

                                size_t h = IsCompressed(img1.format) ? (std::max<size_t>(1, (img1.height + 3) / 4)) : img1.height;

                                for (size_t y = 0; y < h; ++y)
                                {
                                    if (memcmp(ptr1, ptr2, rowPitch) != 0)
                                    {
                                        mismatch = true;
                                        break;
                                    }

                                    ptr1 += rowPitch;
                                    ptr2 += rowPitch;
                                }

                                if (mismatch)
                                {
                                    success = false;
                                    pass = false;
                                    printe("Data mismatch TYPELESS [%zu]:\n%ls\n", j, szPath);
                                    break;
                                }
                            }
                        }
                    }
                }
            }

            if (pass)
            {
                ++npass;
            }
        }

        ++ncount;
    }

    print("%zu images tested, %zu images passed ", ncount, npass);

    return success;
}
