//-------------------------------------------------------------------------------------
// convert.cpp
//
// Copyright (c) Microsoft Corporation.
//-------------------------------------------------------------------------------------

#include "directxtest.h"
#include "tex.h"

#include "DirectXTexP.h"

#ifdef __clang__
#pragma clang diagnostic ignored "-Wcovered-switch-default"
#pragma clang diagnostic ignored "-Wswitch-enum"
#pragma clang diagnostic ignored "-Wswitch"
#endif

using namespace DirectX;

namespace
{
    enum
    {
        FLAGS_NONE = 0x0,
        FLAGS_SEPALPHA = 0x1,
        FLAGS_WIC = 0x2,
        FLAGS_DITHER = 0x4,
        FLAGS_INTEGER = 0x8,
        FLAGS_YUV = 0x10,
        FLAGS_XBOX = 0x20,
    };

    struct TestMedia
    {
        DWORD options;
        TexMetadata metadata;
        const wchar_t *fname;
    };

    const TestMedia g_TestMedia[] =
    {
        //  test-options | width height depth arraySize mipLevels miscFlags miscFlags2 format dimension | filename
        { FLAGS_NONE, { 200, 150, 1, 1, 1, 0, TEX_ALPHA_MODE_OPAQUE, DXGI_FORMAT_B5G5R5A1_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"test555.dds" },
        { FLAGS_NONE, { 32, 32, 1, 1, 1, 0, 0, DXGI_FORMAT_B8G8R8A8_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"test8888.dds" },
        { FLAGS_NONE, { 32, 32, 1, 6, 1, TEX_MISC_TEXTURECUBE, 0, DXGI_FORMAT_B8G8R8A8_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"testcube8888.dds" },
        { FLAGS_NONE, { 32, 32, 1, 6, 6, TEX_MISC_TEXTURECUBE, 0, DXGI_FORMAT_B8G8R8A8_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"testcube8888mip.dds" },
        { FLAGS_NONE, { 32, 32, 4, 1, 1, 0, 0, DXGI_FORMAT_B8G8R8A8_UNORM, TEX_DIMENSION_TEXTURE3D }, MEDIA_PATH L"testvol8888.dds" },
        { FLAGS_NONE, { 32, 32, 4, 1, 6, 0, 0, DXGI_FORMAT_B8G8R8A8_UNORM, TEX_DIMENSION_TEXTURE3D }, MEDIA_PATH L"testvol8888mip.dds" },
        { FLAGS_NONE, { 512, 256, 1, 1, 10, 0, 0, DXGI_FORMAT_R10G10B10A2_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"earth_A2B10G10R10.dds" },
        { FLAGS_NONE, { 512, 256, 1, 1, 10, 0, 0, DXGI_FORMAT_R10G10B10A2_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"earth_A2R10G10B10.dds" },
        { FLAGS_SEPALPHA, { 1024, 512, 1, 1, 11, 0, 0, DXGI_FORMAT_B8G8R8A8_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"earthdiffuse.dds" },
        { FLAGS_NONE, { 256, 256, 1, 1, 1, 0, 0, DXGI_FORMAT_B5G5R5A1_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"windowslogo_A1R5G5B5.dds" },
        { FLAGS_NONE, { 256, 256, 1, 1, 1, 0, 0, DXGI_FORMAT_B5G6R5_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"windowslogo_R5G6B5.dds" },
        { FLAGS_NONE, { 256, 256, 1, 1, 1, 0, TEX_ALPHA_MODE_OPAQUE, DXGI_FORMAT_R8G8B8A8_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"windowslogo_X8B8G8R8.dds" },
        { FLAGS_NONE, { 256, 256, 1, 1, 1, 0, 0, DXGI_FORMAT_B5G6R5_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"windowslogo_rgb565.dds" },
        { FLAGS_NONE, { 256, 256, 1, 1, 1, 0, 0, DXGI_FORMAT_B8G8R8X8_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"windowslogo_X8R8G8B8.dds" },
        { FLAGS_NONE, { 256, 256, 1, 1, 1, 0, 0, DXGI_FORMAT_R8_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"windowslogo_L8.dds" },
        { FLAGS_NONE, { 256, 256, 1, 1, 1, 0, 0, DXGI_FORMAT_R16_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"windowslogo_L16.dds" },
        { FLAGS_NONE, { 256, 256, 1, 1, 1, 0, 0, DXGI_FORMAT_R16_FLOAT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"windowslogo_r16f.dds" },
        { FLAGS_NONE, { 256, 256, 1, 1, 1, 0, 0, DXGI_FORMAT_R32_FLOAT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"windowslogo_r32f.dds" },
        { FLAGS_NONE, { 256, 256, 1, 1, 1, 0, 0, DXGI_FORMAT_R16G16B16A16_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"windowslogo_rgba16.dds" },
        { FLAGS_NONE, { 256, 256, 1, 1, 1, 0, 0, DXGI_FORMAT_R16G16B16A16_FLOAT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"windowslogo_rgba16f.dds" },
        { FLAGS_NONE, { 256, 256, 1, 1, 1, 0, 0, DXGI_FORMAT_R32G32B32A32_FLOAT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"windowslogo_rgba32f.dds" },
        { FLAGS_NONE, { 256, 256, 1, 1, 1, 0, 0, DXGI_FORMAT_A8_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"alphaedge.dds" },
        { FLAGS_NONE, { 1019, 677, 1, 1, 1, 0, 0, DXGI_FORMAT_R1_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"Maui-BlackWhite.dds" },
        { FLAGS_NONE, { 256, 256, 1, 1, 1, 0, 0, DXGI_FORMAT_B4G4R4A4_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"windowslogo_A4L4.dds" },
        { FLAGS_NONE, { 256, 256, 1, 1, 1, 0, TEX_ALPHA_MODE_OPAQUE, DXGI_FORMAT_B4G4R4A4_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"windowslogo_X4R4G4B4.dds" },
        { FLAGS_NONE, { 256, 256, 1, 1, 1, 0, 0, DXGI_FORMAT_B4G4R4A4_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"windowslogo_A4R4G4B4.dds" },
        { FLAGS_NONE, { 512, 512, 1, 1, 1, 0, 0, DXGI_FORMAT_R8G8_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"normalmap2ch.dds" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_A8_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_A8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_G8R8_G8B8_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_G8R8_G8B8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R10G10B10A2_UINT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R10G10B10A2_UINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R10G10B10A2_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R10G10B10A2_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R16G16B16A16_SINT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R16G16B16A16_SINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R16G16B16A16_SNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R16G16B16A16_SNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R16G16B16A16_UINT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R16G16B16A16_UINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R16G16B16A16_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R16G16B16A16_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R16G16_SINT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R16G16_SINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R16G16_SNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R16G16_SNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R16G16_UINT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R16G16_UINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R16G16_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R16G16_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R16_SINT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R16_SINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R16_SNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R16_SNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R16_UINT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R16_UINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R16_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R16_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R32G32B32A32_FLOAT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R32G32B32A32_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R32G32B32A32_UINT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R32G32B32A32_UINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R32G32B32_FLOAT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R32G32B32_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R32G32_FLOAT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R32G32_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R32_FLOAT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R32_FLOAT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R8G8B8A8_SINT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R8G8B8A8_SINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R8G8B8A8_SNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R8G8B8A8_SNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R8G8B8A8_UINT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R8G8B8A8_UINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R8G8B8A8_UNORM_SRGB, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R8G8B8A8_UNORM_SRGB_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R8G8B8A8_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R8G8B8A8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R8G8_B8G8_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R8G8_B8G8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R8G8_SINT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R8G8_SINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R8G8_SNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R8G8_SNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R8G8_UINT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R8G8_UINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R8G8_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R8G8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R8_SINT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R8_SINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R8_SNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R8_SNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R8_UINT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R8_UINT_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_NONE, { 32, 128, 1, 1, 1, 0, 0, DXGI_FORMAT_R8_UNORM, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"io_R8_UNORM_SRV_DIMENSION_TEXTURE2D_MipOff.DDS" },
        { FLAGS_YUV, { 200, 200, 1, 1, 8, 0, 0, DXGI_FORMAT_YUY2, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"lenaYUY2.dds" },
        { FLAGS_YUV, { 200, 200, 1, 1, 8, 0, 0, DXGI_FORMAT_YUY2, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"lenaUYVY.dds" },
        { FLAGS_YUV, { 200, 200, 1, 1, 1, 0, 0, DXGI_FORMAT_AYUV, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"lenaAYUV.dds" },
        { FLAGS_YUV, { 200, 200, 1, 1, 1, 0, 0, DXGI_FORMAT_Y210, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"lenaY210.dds" },
        { FLAGS_YUV, { 200, 200, 1, 1, 1, 0, 0, DXGI_FORMAT_Y216, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"lenaY216.dds" },
        { FLAGS_YUV, { 200, 200, 1, 1, 1, 0, 0, DXGI_FORMAT_Y410, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"lenaY410.dds" },
        { FLAGS_YUV, { 200, 200, 1, 1, 1, 0, 0, DXGI_FORMAT_Y416, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"lenaY416.dds" },
        { FLAGS_YUV, { 1280, 1024, 1, 1, 1, 0, 0, DXGI_FORMAT_YUY2, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"testpatternYUY2.dds" },
        { FLAGS_YUV, { 1280, 1024, 1, 1, 1, 0, 0, DXGI_FORMAT_YUY2, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"testpatternUYVY.dds" },
        { FLAGS_YUV, { 1280, 1024, 1, 1, 1, 0, 0, DXGI_FORMAT_AYUV, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"testpatternAYUV.dds" },
        { FLAGS_YUV, { 1280, 1024, 1, 1, 1, 0, 0, DXGI_FORMAT_Y210, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"testpatternY210.dds" },
        { FLAGS_YUV, { 1280, 1024, 1, 1, 1, 0, 0, DXGI_FORMAT_Y216, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"testpatternY216.dds" },
        { FLAGS_YUV, { 1280, 1024, 1, 1, 1, 0, 0, DXGI_FORMAT_Y410, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"testpatternY410.dds" },
        { FLAGS_YUV, { 1280, 1024, 1, 1, 1, 0, 0, DXGI_FORMAT_Y416, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"testpatternY416.dds" },
        { FLAGS_YUV, { 200, 200, 1, 6, 1, TEX_MISC_TEXTURECUBE, 0, DXGI_FORMAT_YUY2, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"lenaCubeYUY2.dds" },
        { FLAGS_YUV, { 200, 200, 4, 1, 1, 0, 0, DXGI_FORMAT_YUY2, TEX_DIMENSION_TEXTURE3D }, MEDIA_PATH L"lenaVolYUY2.dds" },
        { FLAGS_XBOX, { 1920, 1485, 1, 1, 1, 0, 0, XBOX_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"7E3_1920x1485.dds" },
        { FLAGS_XBOX, { 1920, 1485, 1, 1, 1, 0, 0, XBOX_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT, TEX_DIMENSION_TEXTURE2D }, MEDIA_PATH L"6E4_1920x1485.dds" },
        // TODO - R11G11B10_FLOAT, DXGI_FORMAT_R9G9B9E5_SHAREDEXP
    };

    struct TestTargetFormat
    {
        DWORD option;
        DXGI_FORMAT format;
    };

    const TestTargetFormat g_TargetFormats[] =
    {
        // WIC formats
        { FLAGS_WIC | FLAGS_DITHER, DXGI_FORMAT_R8_UNORM },
        { FLAGS_WIC | FLAGS_DITHER, DXGI_FORMAT_R16_UNORM },
        { FLAGS_WIC, DXGI_FORMAT_R16_FLOAT },
        { FLAGS_WIC, DXGI_FORMAT_D32_FLOAT },
        { FLAGS_WIC, DXGI_FORMAT_R32_FLOAT },
        { FLAGS_WIC | FLAGS_DITHER, DXGI_FORMAT_R10G10B10A2_UNORM },
        { FLAGS_WIC | FLAGS_DITHER, DXGI_FORMAT_R8G8B8A8_UNORM },
        { FLAGS_WIC | FLAGS_DITHER, DXGI_FORMAT_B8G8R8A8_UNORM },
        { FLAGS_WIC | FLAGS_DITHER, DXGI_FORMAT_B8G8R8X8_UNORM },
        { FLAGS_WIC | FLAGS_DITHER, DXGI_FORMAT_R16G16B16A16_UNORM },
        { FLAGS_WIC, DXGI_FORMAT_R16G16B16A16_FLOAT },
        { FLAGS_WIC, DXGI_FORMAT_R32G32B32A32_FLOAT },
        { FLAGS_WIC | FLAGS_DITHER, DXGI_FORMAT_B5G6R5_UNORM },
        { FLAGS_WIC | FLAGS_DITHER, DXGI_FORMAT_B5G5R5A1_UNORM },
        { FLAGS_WIC | FLAGS_DITHER, DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM },
        { FLAGS_WIC | FLAGS_DITHER, DXGI_FORMAT_A8_UNORM },
        { FLAGS_WIC, DXGI_FORMAT_R1_UNORM },

        // Other non-WIC formats
        { FLAGS_INTEGER, DXGI_FORMAT_R32G32B32A32_UINT },
        { FLAGS_INTEGER, DXGI_FORMAT_R32G32B32A32_SINT },
        { FLAGS_NONE, DXGI_FORMAT_R32G32B32_FLOAT },
        { FLAGS_INTEGER, DXGI_FORMAT_R32G32B32_UINT },
        { FLAGS_INTEGER, DXGI_FORMAT_R32G32B32_SINT },
        { FLAGS_DITHER | FLAGS_INTEGER, DXGI_FORMAT_R16G16B16A16_UINT },
        { FLAGS_DITHER, DXGI_FORMAT_R16G16B16A16_SNORM },
        { FLAGS_DITHER | FLAGS_INTEGER, DXGI_FORMAT_R16G16B16A16_SINT },
        { FLAGS_NONE, DXGI_FORMAT_R32G32_FLOAT },
        { FLAGS_INTEGER, DXGI_FORMAT_R32G32_UINT },
        { FLAGS_INTEGER, DXGI_FORMAT_R32G32_SINT },
        { FLAGS_NONE, DXGI_FORMAT_D32_FLOAT_S8X24_UINT },
        { FLAGS_DITHER | FLAGS_INTEGER, DXGI_FORMAT_R10G10B10A2_UINT },
        { FLAGS_NONE, DXGI_FORMAT_R11G11B10_FLOAT },
        { FLAGS_DITHER, DXGI_FORMAT_R8G8B8A8_UNORM_SRGB },
        { FLAGS_DITHER | FLAGS_INTEGER, DXGI_FORMAT_R8G8B8A8_UINT },
        { FLAGS_DITHER, DXGI_FORMAT_R8G8B8A8_SNORM },
        { FLAGS_DITHER | FLAGS_INTEGER, DXGI_FORMAT_R8G8B8A8_SINT },
        { FLAGS_NONE, DXGI_FORMAT_R16G16_FLOAT },
        { FLAGS_DITHER, DXGI_FORMAT_R16G16_UNORM },
        { FLAGS_DITHER | FLAGS_INTEGER, DXGI_FORMAT_R16G16_UINT },
        { FLAGS_DITHER, DXGI_FORMAT_R16G16_SNORM },
        { FLAGS_DITHER | FLAGS_INTEGER, DXGI_FORMAT_R16G16_SINT },
        { FLAGS_NONE | FLAGS_INTEGER, DXGI_FORMAT_R32_UINT },
        { FLAGS_NONE | FLAGS_INTEGER, DXGI_FORMAT_R32_SINT },
        { FLAGS_DITHER | FLAGS_INTEGER, DXGI_FORMAT_D24_UNORM_S8_UINT },
        { FLAGS_DITHER, DXGI_FORMAT_R8G8_UNORM },
        { FLAGS_DITHER | FLAGS_INTEGER, DXGI_FORMAT_R8G8_UINT },
        { FLAGS_DITHER, DXGI_FORMAT_R8G8_SNORM },
        { FLAGS_DITHER | FLAGS_INTEGER, DXGI_FORMAT_R8G8_SINT },
        { FLAGS_DITHER, DXGI_FORMAT_D16_UNORM },
        { FLAGS_DITHER | FLAGS_INTEGER, DXGI_FORMAT_R16_UINT },
        { FLAGS_DITHER, DXGI_FORMAT_R16_SNORM },
        { FLAGS_DITHER | FLAGS_INTEGER, DXGI_FORMAT_R16_SINT },
        { FLAGS_DITHER | FLAGS_INTEGER, DXGI_FORMAT_R8_UINT },
        { FLAGS_DITHER, DXGI_FORMAT_R8_SNORM },
        { FLAGS_DITHER | FLAGS_INTEGER, DXGI_FORMAT_R8_SINT },
        { FLAGS_NONE, DXGI_FORMAT_R9G9B9E5_SHAREDEXP },
        { FLAGS_NONE, DXGI_FORMAT_R8G8_B8G8_UNORM },
        { FLAGS_NONE, DXGI_FORMAT_G8R8_G8B8_UNORM },
        { FLAGS_DITHER, DXGI_FORMAT_B8G8R8A8_UNORM_SRGB },
        { FLAGS_DITHER, DXGI_FORMAT_B8G8R8X8_UNORM_SRGB },
        { FLAGS_DITHER, DXGI_FORMAT_B4G4R4A4_UNORM },
        { FLAGS_NONE, DXGI_FORMAT_AYUV },
        { FLAGS_NONE, DXGI_FORMAT_YUY2 },
        { FLAGS_NONE, DXGI_FORMAT_Y410 },
        { FLAGS_NONE, DXGI_FORMAT_Y416 },
        { FLAGS_NONE, DXGI_FORMAT_Y210 },
        { FLAGS_NONE, DXGI_FORMAT_Y216 },
    #ifdef _M_X64
        { FLAGS_NONE, XBOX_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT },
        { FLAGS_NONE, XBOX_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT },
        { FLAGS_DITHER, XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM },
        { FLAGS_DITHER, XBOX_DXGI_FORMAT_R4G4_UNORM }
    #endif // _M_X64
    };

    //-------------------------------------------------------------------------------------

    struct TestPixels
    {
        DXGI_FORMAT         format;
        XMFLOAT4            vector;
        size_t              pitch;
        uint8_t             bytes[16];
    };

    // format | pixel-vector | pitch | pixel-data
    const TestPixels g_TestPixels[] =
    {
        // DXGI_FORMAT_R32G32B32A32_FLOAT
        { DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 16, { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), 16, { 0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x3F } },
        { DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 16, { 0x00,0x00,0x80,0x3F,0x00,0x00,0x80,0x3F,0x00,0x00,0x80,0x3F,0x00,0x00,0x80,0x3F } },
        { DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), 16, { 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF } },
        { DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 16, { 0x00,0x00,0x80,0x3E,0x00,0x00,0x00,0x3F,0x00,0x00,0x40,0x3F,0x00,0x00,0x80,0x3F } },
        { DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, FLT_MIN), 16, { 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00 } },
        { DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX), 16, { 0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0x7F, 0x7F } },
        { DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, -FLT_MIN), 16, { 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80 } },
        { DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, -FLT_MAX), 16, { 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF } },
        // DXGI_FORMAT_R32G32B32A32_UINT
        { DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 16, { 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 } },
        { DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 4294967296.f), 16, { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF } },
        { DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), 16, { 0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x04,0x00,0x00,0x00 } },
        // DXGI_FORMAT_R32G32B32A32_SINT
        { DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 16, { 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 } },
        { DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 16, { 0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), 16, { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF } },
        { DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), 16, { 0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x04,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f), 16, { 0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFD,0xFF,0xFF,0xFF,0xFC,0xFF,0xFF,0xFF } },
        // DXGI_FORMAT_R32G32B32_FLOAT
        { DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 12, { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), 12, { 0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x3F } },
        { DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 12, { 0x00,0x00,0x80,0x3F,0x00,0x00,0x80,0x3F,0x00,0x00,0x80,0x3F } },
        { DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f), 12, { 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF } },
        { DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 12, { 0x00,0x00,0x80,0x3E,0x00,0x00,0x00,0x3F,0x00,0x00,0x40,0x3F } },
        { DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, 1.0f), 12, { 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00 } },
        { DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, 1.0f), 12, { 0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0x7F, 0x7F } },
        { DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, 1.0f), 12, { 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80 } },
        { DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, 1.0f), 12, { 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF } },
        // DXGI_FORMAT_R32G32B32_UINT
        { DXGI_FORMAT_R32G32B32_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 12, { 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 } },
        { DXGI_FORMAT_R32G32B32_UINT, XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 1.0f), 12, { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF } },
        { DXGI_FORMAT_R32G32B32_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f), 12, { 0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x03,0x00,0x00,0x00 } },
        // DXGI_FORMAT_R32G32B32_SINT
        { DXGI_FORMAT_R32G32B32_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 12, { 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 } },
        { DXGI_FORMAT_R32G32B32_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 12, { 0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R32G32B32_SINT, XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f), 12, { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF } },
        { DXGI_FORMAT_R32G32B32_SINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f), 12, { 0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x03,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R32G32B32_SINT, XMFLOAT4(-1.0f, -2.0f, -3.0f, 1.0f), 12, { 0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFD,0xFF,0xFF,0xFF } },
        // DXGI_FORMAT_R16G16B16A16_FLOAT
        { DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 8, { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(0.25f, 0.25f, 0.25f, 1.0f), 8, { 0x00,0x34,0x00,0x34,0x00,0x34,0x00,0x3C } },
        { DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), 8, { 0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38 } },
        { DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 8, { 0x00,0x3C,0x00,0x3C,0x00,0x3C,0x00,0x3C } },
        { DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), 8, { 0x00,0xBC,0x00,0xBC,0x00,0xBC,0x00,0xBC } },
        { DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 8, { 0x00,0x34,0x00,0x38,0x00,0x3A,0x00,0x3C } },
        { DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(5.96046448e-8f, 5.96046448e-8f, 5.96046448e-8f, 1.0f), 8, { 0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x3C } },
        { DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(6.09755516e-5f, 6.09755516e-5f, 6.09755516e-5f, 1.0f), 8, { 0xFF,0x03,0xFF,0x03,0xFF,0x03,0x00,0x3C } },
        { DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(6.10352e-5f, 6.10352e-5f, 6.10352e-5f, 6.10352e-5f), 8, { 0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04 } },
        { DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(1.00097656f, 1.00097656f, 1.00097656f, 1.0f), 8, { 0x01,0x3C,0x01,0x3C,0x01,0x3C,0x00,0x3C } },
        { DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(65504.f, 65504.f, 65504.f, 65504.f), 8, { 0xFF,0x7B,0xFF,0x7B,0xFF,0x7B,0xFF,0x7B } },
        { DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(-6.10352e-5f, -6.10352e-5f, -6.10352e-5f, -6.10352e-5f), 8, { 0x00,0x84,0x00,0x84,0x00,0x84,0x00,0x84 } },
        { DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(-65504.f, -65504.f, -65504.f, -65504.f), 8, { 0xFF,0xFB,0xFF,0xFB,0xFF,0xFB,0xFF,0xFB } },
        // DXGI_FORMAT_R16G16B16A16_UNORM
        { DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 8, { 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 } },
        { DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), 8, { 0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80 } },
        { DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 8, { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF } },
        { DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 8, { 0x00,0x40,0x00,0x80,0xFF,0xBF,0xFF,0xFF } },
        // DXGI_FORMAT_R16G16B16A16_UINT
        { DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 8, { 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 } },
        { DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(65535.f, 65535.f, 65535.f, 65535.f), 8, { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF } },
        { DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), 8, { 0x01,0x00,0x02,0x00,0x03,0x00,0x04,0x00 } },
        // DXGI_FORMAT_R16G16B16A16_SNORM
        { DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 8, { 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 } },
        { DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 8, { 0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F } },
        { DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), 8, { 0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80 } },
    #ifdef _M_ARM64
        { DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), 8, { 0xFF,0x3F,0xFF,0x3F,0xFF,0x3F,0xFF,0x3F } },
        { DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 8, { 0xFF,0x1F,0xFF,0x3F,0xFF,0x5F,0xFF,0x7F } },
        { DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f), 8, {0x01,0xC0,0x01,0xC0,0x01,0xC0,0x01,0xC0 } },
        { DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-0.25f, -0.5f, -0.75f, -1.0f), 8, { 0x01,0xE0,0x01,0xC0,0x01,0xA0,0x01,0x80 } },
    #else
        { DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), 8, { 0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40 } },
        { DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 8, { 0x00,0x20,0x00,0x40,0xFF,0x5F,0xFF,0x7F } },
        { DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f), 8, { 0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0 } },
        { DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-0.25f, -0.5f, -0.75f, -1.0f), 8, { 0x00,0xE0,0x00,0xC0,0x01,0xA0,0x01,0x80 } },
    #endif
        // DXGI_FORMAT_R16G16B16A16_SINT
        { DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 8, { 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 } },
        { DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 8, { 0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00 } },
        { DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), 8, { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF } },
        { DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), 8, { 0x01,0x00,0x02,0x00,0x03,0x00,0x04,0x00 } },
        { DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f), 8, { 0xFF,0xFF,0xFE,0xFF,0xFD,0xFF,0xFC,0xFF } },
        // DXGI_FORMAT_R32G32_FLOAT
        { DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 8, { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.0f, 1.0f), 8, { 0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x3F } },
        { DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f), 8, { 0x00,0x00,0x80,0x3F,0x00,0x00,0x80,0x3F } },
        { DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF } },
        { DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.0f, 1.0f), 8, { 0x00,0x00,0x80,0x3E,0x00,0x00,0x00,0x3F } },
        { DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00 } },
        { DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(FLT_MAX, FLT_MAX, 0.0f, 1.0f), 8, { 0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0x7F, 0x7F } },
        { DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(-FLT_MIN, -FLT_MIN, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80 } },
        { DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(-FLT_MAX, -FLT_MAX, 0.0f, 1.0f), 8, { 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF } },
        // DXGI_FORMAT_R32G32_UINT
        { DXGI_FORMAT_R32G32_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 8, { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R32G32_UINT, XMFLOAT4(4294967296.f, 4294967296.f, 0.0f, 1.0f), 8, { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF } },
        { DXGI_FORMAT_R32G32_UINT, XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f), 8, { 0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00 } },
        // DXGI_FORMAT_R32G32_SINT
        { DXGI_FORMAT_R32G32_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 8, { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R32G32_SINT, XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f), 8, { 0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R32G32_SINT, XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.0f), 8, { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF } },
        { DXGI_FORMAT_R32G32_SINT, XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f), 8, { 0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R32G32_SINT, XMFLOAT4(-1.0f, -2.0f, 0.0f, 1.0f), 8, { 0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF } },
        // DXGI_FORMAT_D32_FLOAT_S8X24_UINT
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x00, 0x00, 0x00 } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.5f, 1.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x00, 0x3F, 0x01 } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0x3F, 0x01 } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-1.0f, 1.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0xBF, 0x01 } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.25f, 1.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0x3E, 0x01 } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(FLT_MIN, 1.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0x00, 0x01 } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(FLT_MAX, 1.0f, 0.0f, 1.0f), 8, { 0xFF, 0xFF, 0x7F, 0x7F, 0x01 } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-FLT_MIN, 1.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0x80, 0x01 } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-FLT_MAX, 1.0f, 0.0f, 1.0f), 8, { 0xFF, 0xFF, 0x7F, 0xFF, 0x01 } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.0f, 255.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x00, 0x00, 0xFF } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.5f, 255.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x00, 0x3F, 0xFF } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 255.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0x3F, 0xFF } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-1.0f, 255.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0xBF, 0xFF } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.25f, 255.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0x3E, 0xFF } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(FLT_MIN, 255.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0x00, 0xFF } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(FLT_MAX, 255.0f, 0.0f, 1.0f), 8, { 0xFF, 0xFF, 0x7F, 0x7F, 0xFF } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-FLT_MIN, 255.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0x80, 0xFF } },
        { DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-FLT_MAX, 255.0f, 0.0f, 1.0f), 8, { 0xFF, 0xFF, 0x7F, 0xFF, 0xFF } },
        // DXGI_FORMAT_R10G10B10A2_UNORM
        { DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 4, { 0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f), 4, { 0xFF, 0xFD, 0xF7, 0x9F } },
        { DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0xFF, 0xFF, 0xFF, 0xFF } },
        { DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 0.0f), 4, { 0xFF, 0xFC, 0xF7, 0x2F } },
        // DXGI_FORMAT_R10G10B10A2_UINT
        { DXGI_FORMAT_R10G10B10A2_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 4, { 0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R10G10B10A2_UINT, XMFLOAT4(1023.f, 1023.f, 1023.f, 3.f), 4, { 0xFF, 0xFF, 0xFF, 0xFF } },
        { DXGI_FORMAT_R10G10B10A2_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 3.0f), 4, { 0x01, 0x08, 0x30, 0xC0 } },
        // DXGI_FORMAT_R11G11B10_FLOAT
        { DXGI_FORMAT_R11G11B10_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R11G11B10_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), 4, { 0x80, 0x03, 0x1C, 0x70 } },
        { DXGI_FORMAT_R11G11B10_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0xC0, 0x03, 0x1E, 0x78 } },
        { DXGI_FORMAT_R11G11B10_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 4, { 0x40, 0x03, 0x1C, 0x74 } },
        { DXGI_FORMAT_R11G11B10_FLOAT, XMFLOAT4(6.10352e-5f, 6.10352e-5f, 6.10352e-5f, 1.0f), 4, { 0x40, 0x00, 0x02, 0x08 } },
        { DXGI_FORMAT_R11G11B10_FLOAT, XMFLOAT4(65024.f, 65024.f, 64512.f, 1.0f), 4, { 0xBF, 0xFF, 0xFD, 0xF7 } },
        // DXGI_FORMAT_R8G8B8A8_UNORM
        { DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 4, { 0x0, 0x0, 0x0, 0x0 } },
        { DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), 4, { 0x80, 0x80, 0x80, 0x80 } },
        { DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0xFF, 0xFF, 0xFF, 0xFF } },
        { DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 4, { 0x40, 0x80, 0xBF, 0xFF } },
        // DXGI_FORMAT_R8G8B8A8_UINT
        { DXGI_FORMAT_R8G8B8A8_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 4, { 0x0, 0x0, 0x0, 0x0 } },
        { DXGI_FORMAT_R8G8B8A8_UINT, XMFLOAT4(255.f, 255.f, 255.f, 255.f), 4, { 0xFF,0xFF,0xFF,0xFF } },
        { DXGI_FORMAT_R8G8B8A8_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), 4, { 0x01,0x02,0x03,0x04 } },
        // DXGI_FORMAT_R8G8B8A8_SNORM
        { DXGI_FORMAT_R8G8B8A8_SNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 4, { 0x0, 0x0, 0x0, 0x0 } },
        { DXGI_FORMAT_R8G8B8A8_SNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), 4, { 0x3F,0x3F,0x3F,0x3F } },
        { DXGI_FORMAT_R8G8B8A8_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0x7F,0x7F,0x7F,0x7F } },
        { DXGI_FORMAT_R8G8B8A8_SNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 4, { 0x1F,0x3F,0x5F,0x7F} },
        { DXGI_FORMAT_R8G8B8A8_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), 4, { 0x81,0x81,0x81,0x81 } },
    #ifdef _M_ARM64
        { DXGI_FORMAT_R8G8B8A8_SNORM, XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f), 4, { 0xC1,0xC1,0xC1,0xC1 } },
        { DXGI_FORMAT_R8G8B8A8_SNORM, XMFLOAT4(-0.25f, -0.5f, -0.75f, -1.0f), 4, { 0xE1,0xC1,0xA1,0x81 } },
    #else
        { DXGI_FORMAT_R8G8B8A8_SNORM, XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f), 4, { 0xC1,0xC0,0xC0,0xC0 } },
        { DXGI_FORMAT_R8G8B8A8_SNORM, XMFLOAT4(-0.25f, -0.5f, -0.75f, -1.0f), 4, { 0xE1,0xC0,0xA0,0x81 } },
    #endif
        // DXGI_FORMAT_R8G8B8A8_SINT
        { DXGI_FORMAT_R8G8B8A8_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 4, { 0x0, 0x0, 0x0, 0x0 } },
        { DXGI_FORMAT_R8G8B8A8_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0x01,0x01,0x01,0x01 } },
        { DXGI_FORMAT_R8G8B8A8_SINT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), 4, { 0xFF,0xFF,0xFF,0xFF } },
        { DXGI_FORMAT_R8G8B8A8_SINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), 4, { 0x01,0x02,0x03,0x04 } },
        { DXGI_FORMAT_R8G8B8A8_SINT, XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f), 4, { 0xFF,0xFE,0xFD,0xFC } },
        // DXGI_FORMAT_R16G16_FLOAT
        { DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(0.25f, 0.25f, 0.0f, 1.0f), 4, { 0x00,0x34,0x00,0x34 } },
        { DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.0f, 1.0f), 4, { 0x00,0x38,0x00,0x38 } },
        { DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f), 4, { 0x00,0x3C,0x00,0x3C } },
        { DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.0f), 4, { 0x00,0xBC,0x00,0xBC } },
        { DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.0f, 1.0f), 4, { 0x00,0x34,0x00,0x38 } },
        { DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(5.96046448e-8f, 5.96046448e-8f, 0.0f, 1.0f), 4, { 0x01,0x00,0x01,0x00 } },
        { DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(6.09755516e-5f, 6.09755516e-5f, 0.0f, 1.0f), 4, { 0xFF,0x03,0xFF,0x03 } },
        { DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(6.10352e-5f, 6.10352e-5f, 0.0f, 1.0f), 4, { 0x00,0x04,0x00,0x04 } },
        { DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(1.00097656f, 1.00097656f, 0.0f, 1.0f), 4, { 0x01,0x3C,0x01,0x3C } },
        { DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(65504.f, 65504.f, 0.0f, 1.0f), 4, { 0xFF,0x7B,0xFF,0x7B } },
        { DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(-6.10352e-5f, -6.10352e-5f, 0.0f, 1.0f), 4, { 0x00,0x84,0x00,0x84 } },
        { DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(-65504.f, -65504.f, 0.0f, 1.0f), 4, { 0xFF,0xFB,0xFF,0xFB } },
        // DXGI_FORMAT_R16G16_UNORM
        { DXGI_FORMAT_R16G16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R16G16_UNORM, XMFLOAT4(0.5f, 0.5f, 0.0f, 1.0f), 4, { 0x00,0x80,0x00,0x80 } },
        { DXGI_FORMAT_R16G16_UNORM, XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f), 4, { 0xFF,0xFF,0xFF,0xFF } },
        { DXGI_FORMAT_R16G16_UNORM, XMFLOAT4(0.25f, 0.5f, 0.0f, 1.0f), 4, { 0x00,0x40,0x00,0x80 } },
        // DXGI_FORMAT_R16G16_UINT
        { DXGI_FORMAT_R16G16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R16G16_UINT, XMFLOAT4(65535.f, 65535.f, 0.0f, 1.0f), 4, { 0xFF,0xFF,0xFF,0xFF } },
        { DXGI_FORMAT_R16G16_UINT, XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f), 4, { 0x01,0x00,0x02,0x00 } },
        // DXGI_FORMAT_R16G16_SNORM
        { DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(1.0f, 1.0f, 0.0f, 1.f), 4, { 0xFF,0x7F,0xFF,0x7F } },
        { DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.f), 4, { 0x01,0x80,0x01,0x80 } },
    #ifdef _M_ARM64
        { DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(0.5f, 0.5f, 0.0f, 1.f), 4, { 0xFF,0x3F,0xFF,0x3F } },
        { DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(0.25f, 0.5f, 0.0f, 1.f), 4, { 0xFF,0x1F,0xFF,0x3F } },
        { DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(-0.5f, -0.5f, 0.0f, 1.f), 4, { 0x01,0xC0,0x01,0xC0 } },
        { DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(-0.25f, -0.5f, 0.0f, 1.f), 4, { 0x01,0xE0,0x01,0xC0 } },
    #else
        { DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(0.5f, 0.5f, 0.0f, 1.f), 4, { 0x00,0x40,0x00,0x40 } },
        { DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(0.25f, 0.5f, 0.0f, 1.f), 4, { 0x00,0x20,0x00,0x40 } },
        { DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(-0.5f, -0.5f, 0.0f, 1.f), 4, { 0x00,0xC0,0x00,0xC0 } },
        { DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(-0.25f, -0.5f, 0.0f, 1.f), 4, { 0x00,0xE0,0x00,0xC0 } },
    #endif
        // DXGI_FORMAT_R16G16_SINT
        { DXGI_FORMAT_R16G16_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R16G16_SINT, XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f), 4, { 0x01,0x00,0x01,0x00 } },
        { DXGI_FORMAT_R16G16_SINT, XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.0f), 4, { 0xFF,0xFF,0xFF,0xFF } },
        { DXGI_FORMAT_R16G16_SINT, XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f), 4, { 0x01,0x00,0x02,0x00 } },
        { DXGI_FORMAT_R16G16_SINT, XMFLOAT4(-1.0f, -2.0f, 0.0f, 1.0f), 4, { 0xFF,0xFF,0xFE,0xFF } },
        // DXGI_FORMAT_D32_FLOAT
        { DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x00,0x3F } },
        { DXGI_FORMAT_D32_FLOAT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x80,0x3F } },
        { DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x80,0xBF } },
        { DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x80,0x3E } },
        { DXGI_FORMAT_D32_FLOAT, XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x80,0x00 } },
        { DXGI_FORMAT_D32_FLOAT, XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f), 4, { 0xFF,0xFF,0x7F,0x7F } },
        { DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-FLT_MIN, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x80,0x80 } },
        { DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f), 4, { 0xFF,0xFF,0x7F,0xFF } },
        // DXGI_FORMAT_R32_FLOAT
        { DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x00,0x3F } },
        { DXGI_FORMAT_R32_FLOAT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x80,0x3F } },
        { DXGI_FORMAT_R32_FLOAT, XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x80,0xBF } },
        { DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x80,0x3E } },
        { DXGI_FORMAT_R32_FLOAT, XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x80,0x00 } },
        { DXGI_FORMAT_R32_FLOAT, XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f), 4, { 0xFF,0xFF,0x7F,0x7F } },
        { DXGI_FORMAT_R32_FLOAT, XMFLOAT4(-FLT_MIN, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x80,0x80 } },
        { DXGI_FORMAT_R32_FLOAT, XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f), 4, { 0xFF,0xFF,0x7F,0xFF } },
        // DXGI_FORMAT_R32_UINT
        { DXGI_FORMAT_R32_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R32_UINT, XMFLOAT4(4294967296.f, 0.0f, 0.0f, 1.0f), 4, { 0xFF,0xFF,0xFF,0xFF } },
        { DXGI_FORMAT_R32_UINT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), 4, { 0x01,0x00,0x00,0x00 } },
        // DXGI_FORMAT_R32_SINT
        { DXGI_FORMAT_R32_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R32_SINT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), 4, { 0x01,0x00,0x00,0x00 } },
        { DXGI_FORMAT_R32_SINT, XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f), 4, { 0xFF,0xFF,0xFF,0xFF } },
        // DXGI_FORMAT_D24_UNORM_S8_UINT
        { DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00, 0x00, 0x00, 0x00 } },
        { DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.0f, 1.0f, 0.0f, 1.0f), 4, { 0x00, 0x00, 0x00, 0x01 } },
        { DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.5f, 1.0f, 0.0f, 1.0f), 4, { 0xFF, 0xFF, 0x7F, 0x01 } },
        { DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f), 4, { 0xFF, 0xFF, 0xFF, 0x01 } },
        { DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.0f, 255.0f, 0.0f, 1.0f), 4, { 0x00, 0x00, 0x00, 0xFF } },
        { DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.5f, 255.0f, 0.0f, 1.0f), 4, { 0xFF, 0xFF, 0x7F, 0xFF } },
        { DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 255.0f, 0.0f, 1.0f), 4, { 0xFF, 0xFF, 0xFF, 0xFF } },
        // DXGI_FORMAT_R8G8_UNORM
        { DXGI_FORMAT_R8G8_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 2, { 0x00, 0x00 } },
        { DXGI_FORMAT_R8G8_UNORM, XMFLOAT4(0.5f, 0.5f, 0.0f, 1.0f), 2, { 0x80, 0x80 } },
        { DXGI_FORMAT_R8G8_UNORM, XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f), 2, { 0xFF, 0xFF } },
        { DXGI_FORMAT_R8G8_UNORM, XMFLOAT4(0.25f, 0.5f, 0.0f, 1.0f), 2, { 0x40, 0x80 } },
        // DXGI_FORMAT_R8G8_UINT
        { DXGI_FORMAT_R8G8_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x00 } },
        { DXGI_FORMAT_R8G8_UINT, XMFLOAT4(255.f, 255.f, 0.0f, 1.0f), 2, { 0xFF,0xFF } },
        { DXGI_FORMAT_R8G8_UINT, XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f), 2, { 0x01,0x02 } },
        // DXGI_FORMAT_R8G8_SNORM
        { DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x00 } },
        { DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(1.0f, 1.0f, 0.0f, 1.f), 2, { 0x7F,0x7F } },
        { DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.f), 2, { 0x81,0x81 } },
    #ifdef _M_ARM64
        { DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(0.5f, 0.5f, 0.0f, 1.f), 2, { 0x3F,0x3F } },
        { DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(0.25f, 0.5f, 0.0f, 1.f), 2, { 0x1F,0x3F } },
        { DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(-0.5f, -0.5f, 0.0f, 1.f), 2, { 0xC1,0xC1 } },
        { DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(-0.25f, -0.5f, 0.0f, 1.f), 2, { 0xE1,0xC1 } },
    #else
        { DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(0.5f, 0.5f, 0.0f, 1.f), 2, { 0x40,0x40 } },
        { DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(0.25f, 0.5f, 0.0f, 1.f), 2, { 0x20,0x40 } },
        { DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(-0.5f, -0.5f, 0.0f, 1.f), 2, { 0xC0,0xC0 } },
        { DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(-0.25f, -0.5f, 0.0f, 1.f), 2, { 0xE0,0xC0 } },
    #endif
        // DXGI_FORMAT_R8G8_SINT
        { DXGI_FORMAT_R8G8_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x00 } },
        { DXGI_FORMAT_R8G8_SINT, XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f), 2, { 0x01,0x01 } },
        { DXGI_FORMAT_R8G8_SINT, XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.0f), 2, { 0xFF,0xFF } },
        { DXGI_FORMAT_R8G8_SINT, XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f), 2, { 0x01,0x02 } },
        { DXGI_FORMAT_R8G8_SINT, XMFLOAT4(-1.0f, -2.0f, 0.0f, 1.0f), 2, { 0xFF,0xFE } },
        // DXGI_FORMAT_R16_FLOAT
        { DXGI_FORMAT_R16_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x00 } },
        { DXGI_FORMAT_R16_FLOAT, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x34 } },
        { DXGI_FORMAT_R16_FLOAT, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x38 } },
        { DXGI_FORMAT_R16_FLOAT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x3C } },
        { DXGI_FORMAT_R16_FLOAT, XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0xBC } },
        { DXGI_FORMAT_R16_FLOAT, XMFLOAT4(5.96046448e-8f, 0.0f, 0.0f, 1.0f), 2, { 0x01, 0x00 } },
        { DXGI_FORMAT_R16_FLOAT, XMFLOAT4(6.09755516e-5f, 0.0f, 0.0f, 1.0f), 2, { 0xFF, 0x03 } },
        { DXGI_FORMAT_R16_FLOAT, XMFLOAT4(6.10352e-5f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x04 } },
        { DXGI_FORMAT_R16_FLOAT, XMFLOAT4(1.00097656f, 0.0f, 0.0f, 1.0f), 2, { 0x01, 0x3C } },
        { DXGI_FORMAT_R16_FLOAT, XMFLOAT4(65504.f, 0.0f, 0.0f, 1.0f), 2, { 0xFF,0x7B } },
        { DXGI_FORMAT_R16_FLOAT, XMFLOAT4(-6.10352e-5f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x84 } },
        { DXGI_FORMAT_R16_FLOAT, XMFLOAT4(-65504.f, 0.0f, 0.0f, 1.0f), 2, { 0xFF,0xFB } },
        // DXGI_FORMAT_D16_UNORM
        { DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x00 } },
        { DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x80 } },
        { DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), 2, { 0xFF,0xFF } },
        { DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x40 } },
        // DXGI_FORMAT_R16_UNORM
        { DXGI_FORMAT_R16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x00 } },
        { DXGI_FORMAT_R16_UNORM, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x80 } },
        { DXGI_FORMAT_R16_UNORM, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), 2, { 0xFF,0xFF } },
        { DXGI_FORMAT_R16_UNORM, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x40 } },
        // DXGI_FORMAT_R16_UINT
        { DXGI_FORMAT_R16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x00 } },
        { DXGI_FORMAT_R16_UINT, XMFLOAT4(65535.f, 0.0f, 0.0f, 1.0f), 2, { 0xFF,0xFF } },
        { DXGI_FORMAT_R16_UINT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), 2, { 0x01,0x00 } },
        // DXGI_FORMAT_R16_SNORM
        { DXGI_FORMAT_R16_SNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x00 } },
        { DXGI_FORMAT_R16_SNORM, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x40 } },
        { DXGI_FORMAT_R16_SNORM, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), 2, { 0xFF,0x7F } },
        { DXGI_FORMAT_R16_SNORM, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x20 } },
        { DXGI_FORMAT_R16_SNORM, XMFLOAT4(-0.5f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0xC0 } },
        { DXGI_FORMAT_R16_SNORM, XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f), 2, { 0x01,0x80 } },
        { DXGI_FORMAT_R16_SNORM, XMFLOAT4(-0.25f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0xE0 } },
        // DXGI_FORMAT_R16_SINT
        { DXGI_FORMAT_R16_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 2, { 0x00,0x00 } },
        { DXGI_FORMAT_R16_SINT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), 2, { 0x01,0x00 } },
        { DXGI_FORMAT_R16_SINT, XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f), 2, { 0xFF,0xFF } },
        // DXGI_FORMAT_R8_UNORM
        { DXGI_FORMAT_R8_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 1, { 0x0 } },
        { DXGI_FORMAT_R8_UNORM, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), 1, { 0x7F } },
        { DXGI_FORMAT_R8_UNORM, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), 1, { 0xFF } },
        { DXGI_FORMAT_R8_UNORM, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), 1, { 0x3F } },
        // DXGI_FORMAT_R8_UINT
        { DXGI_FORMAT_R8_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 1, { 0x0 } },
        { DXGI_FORMAT_R8_UINT, XMFLOAT4(255.f, 0.0f, 0.0f, 1.0f), 1, { 0xFF } },
        { DXGI_FORMAT_R8_UINT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), 1, { 0x01 } },
        // DXGI_FORMAT_R8_SNORM
        { DXGI_FORMAT_R8_SNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 1, { 0x0 } },
        { DXGI_FORMAT_R8_SNORM, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), 1, { 0x40 } },
        { DXGI_FORMAT_R8_SNORM, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), 1, { 0x7F } },
        { DXGI_FORMAT_R8_SNORM, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), 1, { 0x20 } },
        { DXGI_FORMAT_R8_SNORM, XMFLOAT4(-0.5f, 0.0f, 0.0f, 1.0f), 1, { 0xC0 } },
        { DXGI_FORMAT_R8_SNORM, XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f), 1, { 0x81 } },
        { DXGI_FORMAT_R8_SNORM, XMFLOAT4(-0.25f, 0.0f, 0.0f, 1.0f), 1, { 0xE0 } },
        // DXGI_FORMAT_R8_SINT
        { DXGI_FORMAT_R8_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 1, { 0x0 } },
        { DXGI_FORMAT_R8_SINT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), 1, { 0x01 } },
        { DXGI_FORMAT_R8_SINT, XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f), 1, { 0xFF } },
        // DXGI_FORMAT_A8_UNORM
        { DXGI_FORMAT_A8_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 1, { 0x0 } },
        { DXGI_FORMAT_A8_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.5f), 1, { 0x7F } },
        { DXGI_FORMAT_A8_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 1, { 0xFF } },
        { DXGI_FORMAT_A8_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.25f), 1, { 0x3F } },
        // DXGI_FORMAT_R1_UNORM
        { DXGI_FORMAT_R1_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.f), 1, { 0x0 } },
        { DXGI_FORMAT_R1_UNORM, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.f), 1, { 0x80 } },
        // DXGI_FORMAT_R9G9B9E5_SHAREDEXP
        { DXGI_FORMAT_R9G9B9E5_SHAREDEXP, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.f), 4, { 0x0, 0x0, 0x0, 0x0 } },
        { DXGI_FORMAT_R9G9B9E5_SHAREDEXP, XMFLOAT4(1.f / 65536.f, 1.f / 65536.f, 1.f / 65536.f, 1.f), 4, { 0x00, 0x01, 0x02, 0x04 } },
        { DXGI_FORMAT_R9G9B9E5_SHAREDEXP, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), 4, { 0x00, 0x01, 0x02, 0x7C } },
        { DXGI_FORMAT_R9G9B9E5_SHAREDEXP, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0x00, 0x01, 0x02, 0x84 } },
        { DXGI_FORMAT_R9G9B9E5_SHAREDEXP, XMFLOAT4(255.0, 255.0, 255.0, 1.0f), 4, { 0xFE, 0xFD, 0xFB, 0xBF } },
        { DXGI_FORMAT_R9G9B9E5_SHAREDEXP, XMFLOAT4(65408.f, 65408.f, 65408.f, 1.0f), 4, { 0xFF, 0xFF, 0xFF, 0xFF } },
        { DXGI_FORMAT_R9G9B9E5_SHAREDEXP, XMFLOAT4(0.5f, 0.2f, 1.2f, 1.0f), 4, { 0x80, 0x66, 0xCC, 0x84 } },
        { DXGI_FORMAT_R9G9B9E5_SHAREDEXP, XMFLOAT4(128.0, 128.0, 128.0, 1.0f), 4, { 0x00, 0x01, 0x02, 0xBC } },
        { DXGI_FORMAT_R9G9B9E5_SHAREDEXP, XMFLOAT4(32768.f, 32768.f, 32768.f, 1.0f), 4, { 0x00, 0x01, 0x02, 0xFC } },
        { DXGI_FORMAT_R9G9B9E5_SHAREDEXP, XMFLOAT4(0.5f, 1.0f, 2.0f, 1.0f), 4, { 0x40, 0x00, 0x01, 0x8C } },
        { DXGI_FORMAT_R9G9B9E5_SHAREDEXP, XMFLOAT4(1.f, 2.f, 3.f, 1.0f), 4, { 0x80, 0x00, 0x02, 0x8e } },
        { DXGI_FORMAT_R9G9B9E5_SHAREDEXP, XMFLOAT4(32.f, 480.f, 2016.f, 1.0f), 4, { 0x08, 0xf0, 0xe0, 0xd7 } },
        // DXGI_FORMAT_R8G8_B8G8_UNORM
        { DXGI_FORMAT_R8G8_B8G8_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x0, 0x0, 0x0, 0x0 } },
        { DXGI_FORMAT_R8G8_B8G8_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), 4, { 0x80, 0x80, 0x80, 0x0 } },
        { DXGI_FORMAT_R8G8_B8G8_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0xFF, 0xFF, 0xFF, 0x0 } },
        { DXGI_FORMAT_R8G8_B8G8_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 4, { 0x40, 0x80, 0xBF, 0x0 } },
        // DXGI_FORMAT_G8R8_G8B8_UNORM
        { DXGI_FORMAT_G8R8_G8B8_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x0, 0x0, 0x0, 0x0 } },
        { DXGI_FORMAT_G8R8_G8B8_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), 4, { 0x80, 0x80, 0x0, 0x80 } },
        { DXGI_FORMAT_G8R8_G8B8_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0xFF, 0xFF, 0x0, 0xFF } },
        { DXGI_FORMAT_G8R8_G8B8_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 4, { 0x80, 0x40, 0x0, 0xBF } },
        // DXGI_FORMAT_B5G6R5_UNORM
        { DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 2, { 0x0, 0x0 } },
        { DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(0.516129f, 0.507937f, 0.516129f, 1.f), 2, { 0x10, 0x84 } },
        { DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.f), 2, { 0xFF, 0xFF } },
    #ifdef _M_ARM64
        { DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(0.225806f, 0.507937f, 0.74193f, 1.f), 2, { 0x17, 0x3C } },
    #else
        { DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(0.25f, 0.507937f, 0.75f, 1.f), 2, { 0x17, 0x44 } },
    #endif
        // DXGI_FORMAT_B5G5R5A1_UNORM
        { DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 2, { 0x0, 0x0 } },
        { DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 2, { 0xFF, 0xFF } },
    #ifdef _M_ARM64
        { DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.516129f, 0.516129f, 0.516129f, 1.f), 2, { 0x10, 0xC2 } },
        { DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.258065f, 0.516129f, 0.709667f, 1.0f), 2, { 0x16, 0xA2 } },
    #else
        { DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.548387f, 0.548387f, 0.548387f, 1.f), 2, { 0x31, 0xC6 } },
        { DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 1.0f), 2, { 0x37, 0xA2 } },
    #endif
        // DXGI_FORMAT_B8G8R8A8_UNORM
        { DXGI_FORMAT_B8G8R8A8_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 4, { 0x0, 0x0, 0x0, 0x0 } },
        { DXGI_FORMAT_B8G8R8A8_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), 4, { 0x80, 0x80, 0x80, 0x80 } },
        { DXGI_FORMAT_B8G8R8A8_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0xFF, 0xFF, 0xFF, 0xFF } },
        { DXGI_FORMAT_B8G8R8A8_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 4, { 0xBF, 0x80, 0x40, 0xFF } },
        // DXGI_FORMAT_B8G8R8X8_UNORM
        { DXGI_FORMAT_B8G8R8X8_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x0, 0x0, 0x0, 0xFF } },
        { DXGI_FORMAT_B8G8R8X8_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), 4, { 0x80, 0x80, 0x80, 0xFF } },
        { DXGI_FORMAT_B8G8R8X8_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0xFF, 0xFF, 0xFF, 0xFF } },
        { DXGI_FORMAT_B8G8R8X8_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 4, { 0xBF, 0x80, 0x40, 0xFF } },
        // DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM
        { DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM, XMFLOAT4(-0.7529f, -0.7529f, -0.7529f, 0.f), 4, { 0x0, 0x0, 0x0, 0x0 } },
        { DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 4, { 0x80, 0x01, 0x06, 0x18 } },
        { DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f), 4, { 0x7F, 0xFE, 0xF9, 0xA7 } },
        { DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 0.333334f), 4, { 0x7E, 0xFB, 0xED, 0x77 } },
        { DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM, XMFLOAT4(1.2529f, 1.2529f, 1.2529f, 1.0f), 4, { 0xFE, 0xFB, 0xEF, 0xFF } },
        { DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 0.0f), 4, { 0xFF, 0xFD, 0xE9, 0x2F } },
        // DXGI_FORMAT_B4G4R4A4_UNORM
        { DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 2, { 0x0, 0x0 } },
        { DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 2, { 0xFF, 0xFF } },
    #ifdef _M_ARM64
        { DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(0.466667f, 0.466667f, 0.466667f, 0.466667f), 2, { 0x77, 0x77 } },
        { DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(0.266667f, 0.466667f, 0.666667f, 1.0f), 2, { 0x7A, 0xF4 } },
    #else
        { DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(0.533333f, 0.533333f, 0.533333f, 0.533333f), 2, { 0x88, 0x88 } },
        { DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 1.0f), 2, { 0x8B, 0xF4 } },
    #endif
        // DXGI_FORMAT_AYUV
        { DXGI_FORMAT_AYUV, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 4, { 0x80, 0x80, 0x10, 0x00 } },
        { DXGI_FORMAT_AYUV, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), 4, { 0x80, 0x80, 0x7D, 0x7F } },
        { DXGI_FORMAT_AYUV, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0x80, 0x80, 0xEB, 0x0FF } },
        { DXGI_FORMAT_AYUV, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 4, { 0x60, 0xA6, 0x73, 0xFF } },
        // DXGI_FORMAT_Y410
        { DXGI_FORMAT_Y410, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 4, { 0x0, 0x02, 0x01, 0x20 } },
        { DXGI_FORMAT_Y410, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f), 4, { 0x00, 0xDE, 0x07, 0xA0 } },
        { DXGI_FORMAT_Y410, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0x00, 0xBA, 0x0E, 0xE0 } },
        { DXGI_FORMAT_Y410, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 4, { 0x96, 0x3E, 0xE7, 0xD7 } },
        // DXGI_FORMAT_Y416
        { DXGI_FORMAT_Y416, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 8, { 0x00, 0x80, 0x00, 0x10, 0x00, 0x80, 0x00, 0x00 } },
        { DXGI_FORMAT_Y416, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), 8, { 0x00, 0x80, 0xC9, 0x7D, 0x00, 0x80, 0x00, 0x80 } },
        { DXGI_FORMAT_Y416, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 8, { 0x00, 0x80, 0x91, 0xEB, 0x00, 0x80, 0xFF, 0xFF } },
        { DXGI_FORMAT_Y416, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 8, { 0x72, 0xA5, 0xCC, 0x73, 0x73, 0x5F, 0xFF, 0xFF } },
        // DXGI_FORMAT_YUY2
        { DXGI_FORMAT_YUY2, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x10, 0x80, 0x10, 0x80 } },
        { DXGI_FORMAT_YUY2, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), 4, { 0x7D, 0x80, 0x10, 0x80 } },
        { DXGI_FORMAT_YUY2, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0xEB, 0x80, 0x10, 0x80 } },
        // DXGI_FORMAT_Y210
        { DXGI_FORMAT_Y210, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 8, { 0x00, 0x10, 0x00, 0x80, 0x00, 0x10, 0x00, 0x80 } },
        { DXGI_FORMAT_Y210, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), 8, { 0xC0, 0x7D, 0x00, 0x80, 0x00, 0x10, 0x00, 0x80 } },
        { DXGI_FORMAT_Y210, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 8, { 0x80, 0xEB, 0x00, 0x80, 0x00, 0x10, 0x00, 0x80 } },
        // DXGI_FORMAT_Y216
        { DXGI_FORMAT_Y216, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 8, { 0x00, 0x10, 0x00, 0x80, 0x00, 0x10, 0x00, 0x80 } },
        { DXGI_FORMAT_Y216, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), 8, { 0xC9, 0x7D, 0x00, 0x80, 0x00, 0x10, 0x00, 0x80 } },
        { DXGI_FORMAT_Y216, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 8, { 0x91, 0xEB, 0x00, 0x80, 0x00, 0x10, 0x00, 0x80 } },
    #ifdef _M_X64
        // DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT [Xbox]
        { XBOX_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 4, { 0x00, 0x00, 0x00, 0x00 } },
        { XBOX_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT, XMFLOAT4(0.001953125f, 0.001953125f, 0.001953125f, 1.0f), 4, { 0x01, 0x04, 0x10, 0xC0 } },
        { XBOX_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT, XMFLOAT4(0.248046875f, 0.248046875f, 0.248046875f, 1.0f), 4, { 0x7F, 0xFC, 0xF1, 0xC7 } },
        { XBOX_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT, XMFLOAT4(0.25f, 0.25f, 0.25f, 1.0f), 4, { 0x80, 0x00, 0x02, 0xC8 } },
        { XBOX_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f), 4, { 0x00, 0x01, 0x04, 0x90 } },
        { XBOX_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0x80, 0x01, 0x06, 0xD8 } },
        { XBOX_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT, XMFLOAT4(1.0078125f, 1.0078125f, 1.0078125f, 1.0f), 4, { 0x81, 0x05, 0x16, 0xD8 } },
        { XBOX_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 4, { 0x80, 0x00, 0x04, 0xD4 } },
        { XBOX_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT, XMFLOAT4(31.875f, 31.875f, 31.875f, 1.0f), 4, { 0xFF, 0xFF, 0xFF, 0xFF } },
        // DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT [Xbox]
        { XBOX_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 4, { 0x00, 0x00, 0x00, 0x00 } },
        { XBOX_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT, XMFLOAT4(0.000244140625f, 0.000244140625f, 0.000244140625f, 1.0f), 4, { 0x01, 0x04, 0x10, 0xC0 } },
        { XBOX_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT, XMFLOAT4(0.0153808594f, 0.0153808594f, 0.0153808594f, 1.0f), 4, { 0x3F, 0xFC, 0xF0, 0xC3 } },
        { XBOX_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT, XMFLOAT4(0.015625f, 0.015625f, 0.015625f, 1.0f), 4, { 0x40, 0x00, 0x01, 0xC4 } },
        { XBOX_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT, XMFLOAT4(0.25f, 0.25f, 0.25f, 1.0f), 4, { 0x40, 0x01, 0x05, 0xD4 } },
        { XBOX_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f), 4, { 0x80, 0x01, 0x06, 0x98 } },
        { XBOX_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0xC0, 0x01, 0x07, 0xDC } },
        { XBOX_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT, XMFLOAT4(1.015625f, 1.015625f, 1.015625f, 1.0f), 4, { 0xC1, 0x05, 0x17, 0xDC } },
        { XBOX_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), 4, { 0x40, 0x01, 0x06, 0xDA } },
        { XBOX_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT, XMFLOAT4(508.f, 508.f, 508.f, 1.0f), 4, { 0xFF, 0xFF, 0xFF, 0xFF } },
        // DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM [Xbox]
        { XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), 4, { 0x0, 0x0, 0x0, 0x0 } },
        { XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0xFF, 0xFD, 0xF7, 0xDF } },
        { XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f), 4, { 0x01, 0x06, 0x18, 0xE0 } },
        { XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f), 4, { 0x00, 0xFD, 0xF3, 0x8F } },
        { XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 0.0f), 4, { 0x80, 0xFC, 0xF3, 0x17 } },
        { XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM, XMFLOAT4(-0.500978f, -0.500978f, -0.500978f, 0.666667f), 4, { 0x00, 0x03, 0x0C, 0xB0 } },
        { XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM, XMFLOAT4(-0.25f, -0.5f, -0.75f, 0.0f), 4, { 0x80, 0x03, 0x0C, 0x28 } },
        { XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f), 4, { 0x00, 0xFD, 0xF3, 0x8F } },
        { XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), 4, { 0xFF, 0xFD, 0xF7, 0xDF } },
        { XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 0.0f), 4, { 0x80, 0xFC, 0xF3, 0x17 } },
        { XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM, XMFLOAT4(-0.500978f, -0.500978f, -0.500978f, 0.666667f), 4, { 0x00, 0x03, 0x0C, 0xB0 } },
        { XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f), 4, { 0x01, 0x06, 0x18, 0xE0 } },
        { XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM, XMFLOAT4(-0.25f, -0.5f, -0.75f, 0.0f), 4, { 0x80, 0x03, 0x0C, 0x28 } },
        // DXGI_FORMAT_R4G4_UNORM [Xbox]
        { XBOX_DXGI_FORMAT_R4G4_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 1, { 0x0 } },
        { XBOX_DXGI_FORMAT_R4G4_UNORM, XMFLOAT4(0.533333f, 0.533333f, 0.f, 1.0f), 1, { 0x88 } },
        { XBOX_DXGI_FORMAT_R4G4_UNORM, XMFLOAT4(1.0f, 1.0f, 0.f, 1.0f), 1, { 0xFF } },
        { XBOX_DXGI_FORMAT_R4G4_UNORM, XMFLOAT4(0.266667f, 0.533333f, 0.f, 1.0f), 1, { 0x84 } },
    #endif // _M_X64
    };

    const XMVECTORF32 g_PixelEpsilon = { { { 0.01f, 0.01f, 0.01f, 0.01f } } };

    inline bool IsErrorTooLarge(float f, float threshold)
    {
        return (fabsf(f) > threshold) != 0;
    }

    inline bool SkipMonoCase(DXGI_FORMAT format)
    {
        switch (format)
        {
        case DXGI_FORMAT_R16G16B16A16_FLOAT:
        case DXGI_FORMAT_R32G32B32A32_FLOAT:
        case DXGI_FORMAT_R32G32B32_FLOAT:
        case DXGI_FORMAT_R32_FLOAT:
        case DXGI_FORMAT_R16_FLOAT:
        case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
            return true;
        default:
            return false;
        }
    }

    inline float EncodeSRGB(float f)
    {
        if (f <= 0.0f)
            return 0.0f;
        else if (f >= 1.0f)
            return 1.0f;
        else if (f < 0.0031308f)
            return 12.92f * f;
        else
            return 1.055f * powf(f, 1.0f / 2.4f) - 0.055f;
    }

    inline float DecodeSRGB(float f)
    {
        if (f <= 0.0f)
            return 0.0f;
        else if (f >= 1.0f)
            return 1.0f;
        else if (f <= 0.04045f)
            return f / 12.92f;
        else
            return powf((f + 0.055f) / 1.055f, 2.4f);
    }
}

//-------------------------------------------------------------------------------------

extern HRESULT SaveScratchImage(_In_z_ const wchar_t* szFile, _In_ DirectX::DDS_FLAGS flags, _In_ const ScratchImage& image);
extern HRESULT CopyViaLoadStoreScanline(const Image& srcImage, ScratchImage& image);
extern const wchar_t* GetName(DXGI_FORMAT fmt);

//-------------------------------------------------------------------------------------
// Convert (internalA)
bool TEXTest::Test05()
{
    using namespace DirectX::Internal;

    // Can't catch _EM_INVALID as conversion cases can generate and handle these cases
    unsigned int fpcw = 0;
    _controlfp_s(&fpcw, _MCW_EM, _MCW_EM);

    _controlfp_s(nullptr, _EM_INVALID, _EM_INVALID);

    // Test Load/Store of pixels
    bool success = true;
    XM_ALIGNED_DATA(16) XMVECTOR temp;
    uint8_t buff[16];

    for( size_t index=0; index < std::size(g_TestPixels); ++index )
    {
        auto& p = g_TestPixels[index];

        assert( p.format == DXGI_FORMAT_R1_UNORM || (BitsPerPixel(p.format) == p.pitch*8) );

        if ( !LoadScanline( &temp, 1, &p.bytes[0], p.pitch, p.format ) )
        {
            success = false;
            printe( "Failed loading pixel format %ls, index %zu\n", GetName( p.format ), index );
        }
        else
        {
            XMVECTOR chk = XMLoadFloat4( &p.vector );

            if ( !XMVector4NearEqual( chk, temp, g_PixelEpsilon ) )
            {
                success = false;
                printe( "Failed loading pixel format %ls, index %zu: %f %f %f %f ... %f %f %f %f\n", GetName( p.format ), index,
                        XMVectorGetX(temp), XMVectorGetY(temp), XMVectorGetZ(temp), XMVectorGetW(temp),
                        p.vector.x, p.vector.y, p.vector.z, p.vector.w );
            }
        }

        // LoadScanlineLinear (non-SRGB cases)
        if (!LoadScanlineLinear(&temp, 1, &p.bytes[0], p.pitch, p.format, TEX_FILTER_DEFAULT))
        {
            success = false;
            printe("Failed loading (2) pixel format %ls, index %zu\n", GetName(p.format), index);
        }
        else
        {
            XMVECTOR chk = XMLoadFloat4(&p.vector);

            if (!XMVector4NearEqual(chk, temp, g_PixelEpsilon))
            {
                success = false;
                printe("Failed loading (2) pixel format %ls, index %zu: %f %f %f %f ... %f %f %f %f\n", GetName(p.format), index,
                    XMVectorGetX(temp), XMVectorGetY(temp), XMVectorGetZ(temp), XMVectorGetW(temp),
                    p.vector.x, p.vector.y, p.vector.z, p.vector.w);
            }
        }
    }

    for( size_t index=0; index < std::size(g_TestPixels); ++index )
    {
        auto& p = g_TestPixels[index];

        memset( buff, 0, sizeof(buff) );
        temp = XMLoadFloat4( &p.vector );
        if ( !StoreScanline( buff, p.pitch, p.format, &temp, 1, 0.25f ) )
        {
            success = false;
            printe( "Failed storing pixel format %ls, index %zu\n", GetName( p.format ), index );
        }
        else
        {
            if ( memcmp( buff, &p.bytes[0], p.pitch ) != 0 )
            {
                success = false;
                printe( "Failed storing pixel format %ls, index %zu\n%f %f %f %f:\n",
                        GetName( p.format ), index, p.vector.x, p.vector.y, p.vector.z, p.vector.w );
                printe( "    %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\n... %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\n",
                        buff[0], buff[1], buff[2], buff[3], buff[4], buff[5], buff[6], buff[7],
                        buff[8], buff[9], buff[10], buff[11], buff[12], buff[13], buff[14], buff[15],
                        p.bytes[0], p.bytes[1], p.bytes[2], p.bytes[3], p.bytes[4], p.bytes[5], p.bytes[6], p.bytes[7],
                        p.bytes[8], p.bytes[9], p.bytes[10], p.bytes[11], p.bytes[12], p.bytes[13], p.bytes[14], p.bytes[15] );
            }
        }

        // StoreScanlineLinear (non-SRGB cases)
        temp = XMLoadFloat4( &p.vector );
        if (!StoreScanlineLinear(buff, p.pitch, p.format, &temp, 1, TEX_FILTER_DEFAULT, 0.25f))
        {
            success = false;
            printe("Failed storing (2) pixel format %ls, index %zu\n", GetName(p.format), index);
        }
        else
        {
            if (memcmp(buff, &p.bytes[0], p.pitch) != 0)
            {
                success = false;
                printe("Failed storing (2) pixel format %ls, index %zu\n%f %f %f %f:\n",
                    GetName(p.format), index, p.vector.x, p.vector.y, p.vector.z, p.vector.w);
                printe("    %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\n... %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\n",
                    buff[0], buff[1], buff[2], buff[3], buff[4], buff[5], buff[6], buff[7],
                    buff[8], buff[9], buff[10], buff[11], buff[12], buff[13], buff[14], buff[15],
                    p.bytes[0], p.bytes[1], p.bytes[2], p.bytes[3], p.bytes[4], p.bytes[5], p.bytes[6], p.bytes[7],
                    p.bytes[8], p.bytes[9], p.bytes[10], p.bytes[11], p.bytes[12], p.bytes[13], p.bytes[14], p.bytes[15]);
            }
        }
    }

    // DXGI_FORMAT_R1_UNORM
    {
        static const XMVECTORF32 chk[8] =
        {
            { { { 1.f, 0.f, 0.f, 1.f } } },
            { { { 1.f, 0.f, 0.f, 1.f } } },
            { { { 1.f, 0.f, 0.f, 1.f } } },
            { { { 1.f, 0.f, 0.f, 1.f } } },
            { { { 0.f, 0.f, 0.f, 1.f } } },
            { { { 0.f, 0.f, 0.f, 1.f } } },
            { { { 0.f, 0.f, 0.f, 1.f } } },
            { { { 1.f, 0.f, 0.f, 1.f } } },
        };

        uint8_t c = 0;

        if ( !StoreScanline( &c, 1, DXGI_FORMAT_R1_UNORM, &chk[0].v, 8 ) )
        {
            success = false;
            printe( "Failed storing monochrome pixel data\n" );
        }
        else if ( c != 0xF1 )
        {
            success = false;
            printe( "Failed storing monochrome pixel data: %08X ... F1\n", c );
        }
        else
        {
            auto scanline = make_AlignedArrayXMVECTOR(8);
            if ( !scanline )
            {
                success = false;
                printe( "Error out of memory" );
            }
            else
            {
                if ( !LoadScanline( scanline.get(), 8, &c, 1, DXGI_FORMAT_R1_UNORM ) )
                {
                    success = false;
                    printe( "Failed loading monochrome pixel data\n" );
                }
                else if ( memcmp( scanline.get(), &chk, sizeof(XMVECTOR)*8 ) != 0 )
                {
                    success = false;
                    printe( "Failed loading monochrome pixel data:\n" );
                    for( size_t j=0; j < 8; ++j )
                    {
                        XMVECTOR v = scanline[j];
                        success = false;
                        printe( "%f %f %f %f ... %f %f %f %f\n",
                                XMVectorGetX( v ), XMVectorGetY( v ), XMVectorGetZ( v ), XMVectorGetW( v ),
                                chk[j].f[0], chk[j].f[1], chk[j].f[2], chk[j].f[3] );
                    }
                }
            }
        }
    }

    // Partial Typeless
    {
// format | pixel-vector | pitch | pixel-data
static const TestPixels s_TestPartialTypeless[] =
{
// DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS
    { DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x00, 0x00, 0x00 } },
    { DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x00, 0x3F, 0x00 } },
    { DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0x3F, 0x00 } },
    { DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS, XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0xBF, 0x00 } },
    { DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0x3E, 0x00 } },
    { DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS, XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0x00, 0x00 } },
    { DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS, XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f), 8, { 0xFF, 0xFF, 0x7F, 0x7F, 0x00 } },
    { DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS, XMFLOAT4(-FLT_MIN, 0.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x80, 0x80, 0x00 } },
    { DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS, XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f), 8, { 0xFF, 0xFF, 0x7F, 0xFF, 0x00 } },
// DXGI_FORMAT_X32_TYPELESS_G8X24_UINT
    { DXGI_FORMAT_X32_TYPELESS_G8X24_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x00, 0x00, 0x00 } },
    { DXGI_FORMAT_X32_TYPELESS_G8X24_UINT, XMFLOAT4(0.0f, 255.0f, 0.0f, 1.0f), 8, { 0x00, 0x00, 0x00, 0x00, 0xFF } },
// DXGI_FORMAT_R24_UNORM_X8_TYPELESS
    { DXGI_FORMAT_R24_UNORM_X8_TYPELESS, XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00, 0x00, 0x00, 0x00 } },
    { DXGI_FORMAT_R24_UNORM_X8_TYPELESS, XMFLOAT4( 0.5f, 0.0f, 0.0f, 1.0f), 4, { 0xFF, 0xFF, 0x7F, 0x00 } },
    { DXGI_FORMAT_R24_UNORM_X8_TYPELESS, XMFLOAT4( 1.0f, 0.0f, 0.0f, 1.0f), 4, { 0xFF, 0xFF, 0xFF, 0x00 } },
// DXGI_FORMAT_X24_TYPELESS_G8_UINT
    { DXGI_FORMAT_X24_TYPELESS_G8_UINT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f), 4, { 0x00, 0x00, 0x00, 0x00 } },
    { DXGI_FORMAT_X24_TYPELESS_G8_UINT, XMFLOAT4( 0.0f, 1.0f, 0.0f, 1.0f), 4, { 0x00, 0x00, 0x00, 0x01 } },
    { DXGI_FORMAT_X24_TYPELESS_G8_UINT, XMFLOAT4( 0.0f, 255.0f, 0.0f, 1.0f), 4, { 0x00, 0x00, 0x00, 0xFF } },
};
        for( size_t index=0; index < std::size(s_TestPartialTypeless); ++index )
        {
            auto& p = s_TestPartialTypeless[index];

            assert( BitsPerPixel(p.format) == p.pitch*8 );

            if ( !LoadScanline( &temp, 1, &p.bytes[0], p.pitch, p.format ) )
            {
                success = false;
                printe( "Failed loading partial typeless pixel format %ls, index %zu\n", GetName( p.format ), index );
            }
            else
            {
                XMVECTOR chk = XMLoadFloat4( &p.vector );

                if ( !XMVector4NearEqual( chk, temp, g_PixelEpsilon ) )
                {
                    success = false;
                    printe( "Failed loading partial typeless pixel format %ls, index %zu: %f %f %f %f ... %f %f %f %f\n", GetName( p.format ), index,
                            XMVectorGetX(temp), XMVectorGetY(temp), XMVectorGetZ(temp), XMVectorGetW(temp),
                            p.vector.x, p.vector.y, p.vector.z, p.vector.w );
                }
            }
        }
    }

    _clearfp();
    _controlfp_s(nullptr, fpcw, _MCW_EM);

    return success;
}


//-------------------------------------------------------------------------------------
// Convert (internalB)
bool TEXTest::Test05B()
{
    using namespace DirectX::Internal;

    // Test Load/Store of images
    bool success = true;

    size_t ncount = 0;
    size_t npass = 0;

    for( size_t index=0; index < std::size(g_TestMedia); ++index )
    {
        wchar_t szPath[MAX_PATH] = {};
        DWORD ret = ExpandEnvironmentStringsW(g_TestMedia[index].fname, szPath, MAX_PATH);
        if ( !ret || ret > MAX_PATH )
        {
            printe( "ERROR: ExpandEnvironmentStrings FAILED\n" );
            return false;
        }

#if defined(_DEBUG) && defined(VERBOSE)
        OutputDebugString(szPath);
        OutputDebugStringA("\n");
#endif

        // Form dest path
        wchar_t ext[_MAX_EXT];
        wchar_t fname[_MAX_FNAME];
        _wsplitpath_s( szPath, nullptr, 0, nullptr, 0, fname, _MAX_FNAME, ext, _MAX_EXT );

        wchar_t tempDir[MAX_PATH] = {};
        ret = ExpandEnvironmentStringsW(TEMP_PATH L"cvt_i", tempDir, MAX_PATH);
        if ( !ret || ret > MAX_PATH )
        {
            printe( "ERROR: ExpandEnvironmentStrings FAILED\n" );
            return false;
        }

        CreateDirectoryW( tempDir, nullptr );

        wchar_t szDestPath[MAX_PATH] = {};
        _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, fname, L".dds" );

        TexMetadata metadata;
        ScratchImage srcimage;
        HRESULT hr = LoadFromDDSFile( szPath, DDS_FLAGS_NONE, &metadata, srcimage );

        const TexMetadata* check = &g_TestMedia[index].metadata;
        if ( FAILED(hr) )
        {
            success = false;
            printe( "Failed getting DDS data from (HRESULT %08X):\n%ls\n", static_cast<unsigned int>(hr), szPath );
        }
        else if ( memcmp( &metadata, check, sizeof(TexMetadata) ) != 0 )
        {
            success = false;
            printe( "Metadata error in DDS:\n%ls\n", szPath );
            printmeta( &metadata );
            printmetachk( check );
        }
        else
        {
            ScratchImage image;
            hr = CopyViaLoadStoreScanline( *srcimage.GetImage(0,0,0), image );
            if ( FAILED(hr) )
            {
                success = false;
                printe( "Failed internal scanline load/store (HRESULT %08X) %ls:\n%ls\n",
                        static_cast<unsigned int>(hr), GetName( srcimage.GetMetadata().format ), szPath );
            }
            else
            {
                // Verify convert image is the same as the original
                SaveScratchImage( szDestPath, DDS_FLAGS_NONE, image );

                float targMSE = 0.001f;
                DWORD cvtflags = GetConvertFlags( metadata.format );
                if (cvtflags & (CONVF_SNORM|CONVF_SINT))
                {
                    // Math routines for storing signed integers clamps out the most negative value (i.e. -128, -32768)
                    targMSE = 0.011f;
                }

                float mse, mseV[4];
                hr = ComputeMSE( *srcimage.GetImage(0,0,0), *image.GetImage(0,0,0), mse, mseV );
                if ( FAILED(hr) )
                {
                    success = false;
                    printe( "Failed comparing internal convert images (HRESULT %08X):\n%ls\n", static_cast<unsigned int>(hr), szPath );
                }
                else if ( IsErrorTooLarge( mse, targMSE ) )
                {
                    success = false;
                    printe( "Failed comparing internal convert images MSE = %f (%f %f %f %f)... %f:\n%ls\n",
                            mse, mseV[0], mseV[1], mseV[2], mseV[3], targMSE, szPath );
                }

                ++npass;
            }

            ++ncount;
        }
    }

    print("%zu images tested, %zu images passed ", ncount, npass );

    return success;
}


//-------------------------------------------------------------------------------------
// Convert (internalC)
bool TEXTest::Test05C()
{
    using namespace DirectX::Internal;

    // Test SRGB conversions of pixels
    bool success = true;
    XM_ALIGNED_DATA(16) XMVECTOR temp;

    for( size_t index=0; index < std::size(g_TestPixels); ++index )
    {
        auto& p = g_TestPixels[index];

        DXGI_FORMAT srgb = MakeSRGB( p.format );

        if ( srgb == p.format )
            continue;

        if ( !LoadScanline( &temp, 1, &p.bytes[0], p.pitch, p.format ) )
        {
            success = false;
            printe( "Failed loading pixel format %ls, index %zu\n", GetName( p.format ), index );
        }
        else
        {
            ConvertScanline(&temp, 1, srgb, p.format, TEX_FILTER_DEFAULT);

            XMVECTORF32 chk = { { { EncodeSRGB(p.vector.x),
                                    EncodeSRGB(p.vector.y),
                                    EncodeSRGB(p.vector.z),
                                    p.vector.w } } };

            if ( !XMVector4NearEqual( chk, temp, g_PixelEpsilon ) )
            {
                success = false;
                printe( "Failed converting pixel %ls -> %ls, index %zu: %f %f %f %f ... %f %f %f %f\n", GetName( p.format ), GetName( srgb ), index,
                        XMVectorGetX(temp), XMVectorGetY(temp), XMVectorGetZ(temp), XMVectorGetW(temp),
                        XMVectorGetX(chk), XMVectorGetY(chk), XMVectorGetZ(chk), XMVectorGetW(chk) );
            }
        }

        if ( !LoadScanline( &temp, 1, &p.bytes[0], p.pitch, srgb ) )
        {
            success = false;
            printe( "Failed loading pixel format %ls, index %zu\n", GetName( p.format ), index );
        }
        else
        {
            ConvertScanline(&temp, 1, p.format, srgb, TEX_FILTER_DEFAULT);

            XMVECTORF32 chk = { { { DecodeSRGB(p.vector.x),
                                    DecodeSRGB(p.vector.y),
                                    DecodeSRGB(p.vector.z),
                                    p.vector.w } } };

            if ( !XMVector4NearEqual( chk, temp, g_PixelEpsilon ) )
            {
                success = false;
                printe( "Failed converting pixel %ls -> %ls, index %zu: %f %f %f %f ... %f %f %f %f\n", GetName( srgb ), GetName( p.format ), index,
                        XMVectorGetX(temp), XMVectorGetY(temp), XMVectorGetZ(temp), XMVectorGetW(temp),
                        XMVectorGetX(chk), XMVectorGetY(chk), XMVectorGetZ(chk), XMVectorGetW(chk) );
            }
        }

        // LoadScanlineLinear
        if ( !LoadScanlineLinear( &temp, 1, &p.bytes[0], p.pitch, p.format, TEX_FILTER_SRGB ) )
        {
            success = false;
            printe( "Failed linear loading (1) pixel format %ls, index %zu\n", GetName( p.format ), index );
        }
        else
        {
            XMVECTORF32 chk = { { { DecodeSRGB(p.vector.x),
                                    DecodeSRGB(p.vector.y),
                                    DecodeSRGB(p.vector.z),
                                    p.vector.w } } };

            if ( !XMVector4NearEqual( chk, temp, g_PixelEpsilon ) )
            {
                success = false;
                printe( "Failed linear loading (1) pixel %ls, index %zu: %f %f %f %f ... %f %f %f %f\n", GetName( p.format ), index,
                        XMVectorGetX(temp), XMVectorGetY(temp), XMVectorGetZ(temp), XMVectorGetW(temp),
                        XMVectorGetX(chk), XMVectorGetY(chk), XMVectorGetZ(chk), XMVectorGetW(chk) );
            }
        }

        if (!LoadScanlineLinear(&temp, 1, &p.bytes[0], p.pitch, srgb, TEX_FILTER_DEFAULT))
        {
            success = false;
            printe("Failed linear loading (2) pixel format %ls, index %zu\n", GetName(p.format), index);
        }
        else
        {
            XMVECTORF32 chk = { { { DecodeSRGB(p.vector.x),
                                    DecodeSRGB(p.vector.y),
                                    DecodeSRGB(p.vector.z),
                                    p.vector.w } } };

            if ( !XMVector4NearEqual( chk, temp, g_PixelEpsilon ) )
            {
                success = false;
                printe( "Failed linear loading (2) pixel %ls, index %zu: %f %f %f %f ... %f %f %f %f\n", GetName( p.format ), index,
                        XMVectorGetX(temp), XMVectorGetY(temp), XMVectorGetZ(temp), XMVectorGetW(temp),
                        XMVectorGetX(chk), XMVectorGetY(chk), XMVectorGetZ(chk), XMVectorGetW(chk) );
            }
        }

        // StoreScanlineLinear
        uint8_t buff[16];
        temp = XMLoadFloat4( &p.vector );
        if ( !StoreScanlineLinear( &buff[0], 16, p.format, &temp, 1, TEX_FILTER_SRGB ) )
        {
            success = false;
            printe( "Failed linear storing (1) pixel format %ls, index %zu\n", GetName( p.format ), index );
        }
        else if ( !LoadScanline( &temp, 1, &buff, 16, p.format ) )
        {
            success = false;
            printe( "Failed reloading linear stored (1) pixel format %ls, index %zu\n", GetName( p.format ), index );
        }
        else
        {
            XMVECTORF32 chk = { { { EncodeSRGB(p.vector.x),
                                    EncodeSRGB(p.vector.y),
                                    EncodeSRGB(p.vector.z),
                                    p.vector.w } } };

            if ( !XMVector4NearEqual( chk, temp, g_PixelEpsilon ) )
            {
                success = false;
                printe( "Failed linear storing (1) pixel %ls, index %zu: %f %f %f %f ... %f %f %f %f\n", GetName( p.format ), index,
                        XMVectorGetX(temp), XMVectorGetY(temp), XMVectorGetZ(temp), XMVectorGetW(temp),
                        XMVectorGetX(chk), XMVectorGetY(chk), XMVectorGetZ(chk), XMVectorGetW(chk) );
            }
        }

        temp = XMLoadFloat4( &p.vector );
        if (!StoreScanlineLinear(&buff[0], 16, srgb, &temp, 1, TEX_FILTER_DEFAULT))
        {
            success = false;
            printe("Failed linear storing (2) pixel format %ls, index %zu\n", GetName(p.format), index);
        }
        else if ( !LoadScanline( &temp, 1, &buff, 16, p.format ) )
        {
            success = false;
            printe( "Failed reloading linear stored (2) pixel format %ls, index %zu\n", GetName( p.format ), index );
        }
        else
        {
            XMVECTORF32 chk = { { { EncodeSRGB(p.vector.x),
                                    EncodeSRGB(p.vector.y),
                                    EncodeSRGB(p.vector.z),
                                    p.vector.w } } };

            if ( !XMVector4NearEqual( chk, temp, g_PixelEpsilon ) )
            {
                success = false;
                printe( "Failed linear storing (2) pixel %ls, index %zu: %f %f %f %f ... %f %f %f %f\n", GetName( p.format ), index,
                        XMVectorGetX(temp), XMVectorGetY(temp), XMVectorGetZ(temp), XMVectorGetW(temp),
                        XMVectorGetX(chk), XMVectorGetY(chk), XMVectorGetZ(chk), XMVectorGetW(chk) );
            }
        }
    }

    return success;
}



//-------------------------------------------------------------------------------------
// Convert (internalD)
bool TEXTest::Test05D()
{
    using namespace DirectX::Internal;

    size_t npass = 0;

    // Test pixel type conversions
    bool success = true;
    XM_ALIGNED_DATA(16) XMVECTOR temp;
    uint8_t buff[16];

    struct ConvertType
    {
        XMFLOAT4    svector;
        DXGI_FORMAT sformat;
        DXGI_FORMAT dformat;
        XMFLOAT4    dvector;
        TEX_FILTER_FLAGS flags;
    };

    static const ConvertType s_TestConvert[] =
    {
    //--- Bit-depth -------------------------------------------------------------------

    // 32 -> 16
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, FLT_MIN),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, FLT_MIN), TEX_FILTER_DEFAULT },
        { XMFLOAT4(65504.f, 65504.f, 65504.f, 65504.f),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(65504.f, 65504.f, 65504.f, 65504.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(65504.f, 65504.f, 65504.f, 65504.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, -FLT_MIN),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, -FLT_MIN), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-65504.f, -65504.f, -65504.f, -65504.f),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(-65504.f, -65504.f, -65504.f, -65504.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, -FLT_MAX),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(-65504.f, -65504.f, -65504.f, -65504.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 4294967296.f), DXGI_FORMAT_R32G32B32A32_UINT,  DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(65535.f, 65535.f, 65535.f, 65535.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT,  DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT,  DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_SINT,  DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT,  DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f),                             DXGI_FORMAT_R32G32B32A32_SINT,  DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f), TEX_FILTER_DEFAULT },
    // 32 -> 10
        { XMFLOAT4(1023.f, 1023.f, 1023.f, 3.f),                            DXGI_FORMAT_R32G32B32A32_UINT,  DXGI_FORMAT_R10G10B10A2_UINT, XMFLOAT4(1023.f, 1023.f, 1023.f, 3.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 3.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT,  DXGI_FORMAT_R10G10B10A2_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 3.0f), TEX_FILTER_DEFAULT },
    // 32 -> 8
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                             DXGI_FORMAT_R32G32B32A32_UINT,  DXGI_FORMAT_R8G8B8A8_UINT, XMFLOAT4(255.f, 255.f, 255.f, 255.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT,  DXGI_FORMAT_R8G8B8A8_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT,  DXGI_FORMAT_R8G8B8A8_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_SINT,  DXGI_FORMAT_R8G8B8A8_SINT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT,  DXGI_FORMAT_R8G8B8A8_SINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f),                             DXGI_FORMAT_R32G32B32A32_SINT,  DXGI_FORMAT_R8G8B8A8_SINT, XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f), TEX_FILTER_DEFAULT },
    // 16 -> 32
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                                 DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.25f, 0.25f, 1.0f),                              DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.25f, 0.25f, 0.25f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(5.96046448e-8f, 5.96046448e-8f, 5.96046448e-8f, 1.0f),   DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(5.96046448e-8f, 5.96046448e-8f, 5.96046448e-8f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(6.09755516e-5f, 6.09755516e-5f, 6.09755516e-5f, 1.0f),   DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(6.09755516e-5f, 6.09755516e-5f, 6.09755516e-5f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(6.10352e-5f, 6.10352e-5f, 6.10352e-5f, 6.10352e-5f),     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(6.10352e-5f, 6.10352e-5f, 6.10352e-5f, 6.10352e-5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.00097656f, 1.00097656f, 1.00097656f, 1.0f),            DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(1.00097656f, 1.00097656f, 1.00097656f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(65504.f, 65504.f, 65504.f, 65504.f),                     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(65504.f, 65504.f, 65504.f, 65504.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-6.10352e-5f, -6.10352e-5f, -6.10352e-5f, -6.10352e-5f), DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-6.10352e-5f, -6.10352e-5f, -6.10352e-5f, -6.10352e-5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-65504.f, -65504.f, -65504.f, -65504.f),                 DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-65504.f, -65504.f, -65504.f, -65504.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(65535.f, 65535.f, 65535.f, 65535.f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4(65535.f, 65535.f, 65535.f, 65535.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f),                             DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f), TEX_FILTER_DEFAULT },
    // 16 -> 10
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(0.499511f, 0.499511f, 0.499511f, 0.3333333f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(65535.f, 65535.f, 65535.f, 65535.f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R10G10B10A2_UINT, XMFLOAT4(1023.f, 1023.f, 1023.f, 3.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R10G10B10A2_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 3.0f), TEX_FILTER_DEFAULT },
    // 16 -> 8
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8G8B8A8_SNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8G8B8A8_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8G8B8A8_SNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f),                             DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8G8B8A8_SNORM, XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8G8B8A8_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.25f, -0.5f, -0.75f, -1.0f),                           DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8G8B8A8_SNORM, XMFLOAT4(-0.25f, -0.5f, -0.75f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(65535.f, 65535.f, 65535.f, 65535.f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R8G8B8A8_UINT, XMFLOAT4(255.f, 255.f, 255.f, 255.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R8G8B8A8_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R8G8B8A8_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R8G8B8A8_SINT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R8G8B8A8_SINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f),                             DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R8G8B8A8_SINT, XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f), TEX_FILTER_DEFAULT },
    // 16 -> 16bpp
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(0.516129f, 0.516129f, 0.516129f, 1.f ), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.f ), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(0.258065f, 0.507937f, 0.741935f, 1.f ), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.25f),                                DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.516129f, 0.516129f, 0.516129f, 0.0f ), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.516129f, 0.516129f, 0.516129f, 1.0f ), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f ), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.258065f, 0.516129f, 0.741935f, 1.0f ), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(0.533333f, 0.533333f, 0.533333f, 0.533333f ), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(1.0f, 1.0f, 1.f, 1.0f ), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 1.0f ), TEX_FILTER_DEFAULT },
    // 10 -> 32
        { XMFLOAT4(1023.f, 1023.f, 1023.f, 3.f),                            DXGI_FORMAT_R10G10B10A2_UINT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4(1023.f, 1023.f, 1023.f, 3.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 3.0f),                                 DXGI_FORMAT_R10G10B10A2_UINT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 3.0f), TEX_FILTER_DEFAULT },
    // 10 -> 16
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f),                            DXGI_FORMAT_R10G10B10A2_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R10G10B10A2_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 0.0f),                               DXGI_FORMAT_R10G10B10A2_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1023.f, 1023.f, 1023.f, 3.f),                            DXGI_FORMAT_R10G10B10A2_UINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(1023.f, 1023.f, 1023.f, 3.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 3.0f),                                 DXGI_FORMAT_R10G10B10A2_UINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 3.0f), TEX_FILTER_DEFAULT },
    // 10 -> 8
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f),                            DXGI_FORMAT_R10G10B10A2_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R10G10B10A2_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 0.0f),                               DXGI_FORMAT_R10G10B10A2_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1023.f, 1023.f, 1023.f, 3.f),                            DXGI_FORMAT_R10G10B10A2_UINT, DXGI_FORMAT_R8G8B8A8_UINT, XMFLOAT4(255.f, 255.f, 255.f, 3.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 3.0f),                                 DXGI_FORMAT_R10G10B10A2_UINT, DXGI_FORMAT_R8G8B8A8_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 3.0f), TEX_FILTER_DEFAULT },
    // 10 -> 16bpp
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f),                            DXGI_FORMAT_R10G10B10A2_UNORM, DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(0.516129f, 0.507937f, 0.516129f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R10G10B10A2_UNORM, DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 0.0f),                               DXGI_FORMAT_R10G10B10A2_UNORM, DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f),                            DXGI_FORMAT_R10G10B10A2_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.516129f, 0.516129f, 0.516129f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R10G10B10A2_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 0.0f),                               DXGI_FORMAT_R10G10B10A2_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.258065f,0.516129f, 0.741935f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f),                            DXGI_FORMAT_R10G10B10A2_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(0.533333f, 0.533333f, 0.533333f, 0.666667f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R10G10B10A2_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 0.0f),                               DXGI_FORMAT_R10G10B10A2_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 0.0f), TEX_FILTER_DEFAULT },
    // 8 -> 32
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                             DXGI_FORMAT_R8G8B8A8_UINT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4(255.f, 255.f, 255.f, 255.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R8G8B8A8_UINT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R8G8B8A8_SINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R8G8B8A8_SINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R8G8B8A8_SINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f),                             DXGI_FORMAT_R8G8B8A8_SINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f), TEX_FILTER_DEFAULT },
    // 8 -> 16
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R8G8B8A8_SNORM, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R8G8B8A8_SNORM, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R8G8B8A8_SNORM, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f),                             DXGI_FORMAT_R8G8B8A8_SNORM, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R8G8B8A8_SNORM, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.25f, -0.5f, -0.75f, -1.0f),                           DXGI_FORMAT_R8G8B8A8_SNORM, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-0.25f, -0.5f, -0.75f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                             DXGI_FORMAT_R8G8B8A8_UINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(255.f, 255.f, 255.f, 255.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R8G8B8A8_UINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R8G8B8A8_SINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R8G8B8A8_SINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R8G8B8A8_SINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f),                             DXGI_FORMAT_R8G8B8A8_SINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f), TEX_FILTER_DEFAULT },
    // 8 -> 10
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(0.499511f, 0.499511f, 0.499511f, 0.3333333f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                             DXGI_FORMAT_R8G8B8A8_UINT, DXGI_FORMAT_R10G10B10A2_UINT, XMFLOAT4(255.f, 255.f, 255.f, 3.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R8G8B8A8_UINT, DXGI_FORMAT_R10G10B10A2_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 3.0f), TEX_FILTER_DEFAULT },
    // 8 -> 16bpp
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(0.516129f, 0.507937f, 0.516129f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.516129f, 0.516129f, 0.516129f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.258065f, 0.516129f, 0.741935f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(0.533333f, 0.533333f, 0.533333f, 0.533333f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 1.0f), TEX_FILTER_DEFAULT },
    // 16bpp -> 16
        { XMFLOAT4(0.548387f, 0.548387f, 0.548387f, 1.f),                   DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.548387f, 0.548387f, 0.548387f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f ), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 1.0f),                  DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 0.0f),                  DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.516129f, 0.507937f, 0.516129f, 1.f),                   DXGI_FORMAT_B5G6R5_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.516129f, 0.507937f, 0.516129f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_B5G6R5_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.507937f, 0.75f, 1.0f),                          DXGI_FORMAT_B5G6R5_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.25f, 0.507937f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.533333f, 0.533333f, 0.533333f, 0.533333f),             DXGI_FORMAT_B4G4R4A4_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.533333f, 0.533333f, 0.533333f, 0.533333f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_B4G4R4A4_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 1.0f),                  DXGI_FORMAT_B4G4R4A4_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 1.0f), TEX_FILTER_DEFAULT },
    // 16bpp -> 10
        { XMFLOAT4(0.548387f, 0.548387f, 0.548387f, 1.f),                   DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(0.548387f, 0.548387f, 0.548387f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 1.0f),                  DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 0.0f),                  DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.516129f, 0.507937f, 0.516129f, 1.f),                   DXGI_FORMAT_B5G6R5_UNORM, DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(0.516129f, 0.507937f, 0.516129f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_B5G6R5_UNORM, DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.507937f, 0.75f, 1.0f),                          DXGI_FORMAT_B5G6R5_UNORM, DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(0.25f, 0.507937f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.533333f, 0.533333f, 0.533333f, 0.533333f),             DXGI_FORMAT_B4G4R4A4_UNORM, DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(0.533333f, 0.533333f, 0.533333f, 0.333333f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_B4G4R4A4_UNORM, DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 1.0f),                  DXGI_FORMAT_B4G4R4A4_UNORM, DXGI_FORMAT_R10G10B10A2_UNORM, XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 1.0f), TEX_FILTER_DEFAULT },
    // 16bpp -> 8
        { XMFLOAT4(0.548387f, 0.548387f, 0.548387f, 1.f),                   DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.548387f, 0.548387f, 0.548387f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 1.0f),                  DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 0.0f),                  DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.516129f, 0.507937f, 0.516129f, 1.f),                   DXGI_FORMAT_B5G6R5_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.516129f, 0.507937f, 0.516129f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_B5G6R5_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.507937f, 0.75f, 1.0f),                          DXGI_FORMAT_B5G6R5_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.25f, 0.507937f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.533333f, 0.533333f, 0.533333f, 0.533333f),             DXGI_FORMAT_B4G4R4A4_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.533333f, 0.533333f, 0.533333f, 0.533333f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_B4G4R4A4_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 1.0f),                  DXGI_FORMAT_B4G4R4A4_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 1.0f), TEX_FILTER_DEFAULT },
    // 16bpp -> 16bpp
        { XMFLOAT4(0.516129f, 0.507937f, 0.516129f, 1.f),                   DXGI_FORMAT_B5G6R5_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.516129f, 0.507937f, 0.516129f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_B5G6R5_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.507937f, 0.75f, 1.0f),                          DXGI_FORMAT_B5G6R5_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.25f, 0.507937f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.516129f, 0.507937f, 0.516129f, 1.f),                   DXGI_FORMAT_B5G6R5_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(0.533333f, 0.533333f, 0.533333f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_B5G6R5_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.507937f, 0.75f, 1.0f),                          DXGI_FORMAT_B5G6R5_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.548387f, 0.548387f, 0.548387f, 1.f),                   DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(0.548387f, 0.555556f, 0.548387, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 1.0f),                  DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(0.258065f, 0.555556f, 0.741935f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 0.0f),                  DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(0.258065f, 0.555556f, 0.741935f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.548387f, 0.548387f, 0.548387f, 1.f),                   DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(0.533333f, 0.533333f, 0.533333f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 1.0f),                  DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.266667f, 0.548387f, 0.733333f, 0.0f),                  DXGI_FORMAT_B5G5R5A1_UNORM, DXGI_FORMAT_B4G4R4A4_UNORM, XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.533333f, 0.533333f, 0.533333f, 0.533333f),             DXGI_FORMAT_B4G4R4A4_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.548387f, 0.548387f, 0.548387f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_B4G4R4A4_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 1.0f),                  DXGI_FORMAT_B4G4R4A4_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.258065f, 0.548387f, 0.741935f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 0.0f),                  DXGI_FORMAT_B4G4R4A4_UNORM, DXGI_FORMAT_B5G5R5A1_UNORM, XMFLOAT4(0.258065f, 0.548387f, 0.741935f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.533333f, 0.533333f, 0.533333f, 0.533333f),             DXGI_FORMAT_B4G4R4A4_UNORM, DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(0.548387f, 0.539683f, 0.548387f, 1.f ), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_B4G4R4A4_UNORM, DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 1.0f),                  DXGI_FORMAT_B4G4R4A4_UNORM, DXGI_FORMAT_B5G6R5_UNORM, XMFLOAT4(0.266667f, 0.533333f, 0.733333f, 1.f), TEX_FILTER_DEFAULT },

    //--- Channels --------------------------------------------------------------------

    // 4 -> 3
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, FLT_MIN),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, -FLT_MIN),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, -FLT_MAX),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 4294967296.f), DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R32G32B32_UINT, XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R32G32B32_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32G32B32_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32G32B32_SINT, XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32G32B32_SINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32G32B32_SINT, XMFLOAT4(-1.0f, -2.0f, -3.0f, 1.0f), TEX_FILTER_DEFAULT },
    // 4 -> 2
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(1.0f, 1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(-1.0f, -1.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.25f, 0.75f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.5f, 0.75f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN | TEX_FILTER_RGB_COPY_BLUE  },
        { XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, FLT_MIN),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(FLT_MAX, FLT_MAX, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, -FLT_MIN),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(-FLT_MIN, -FLT_MIN, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, -FLT_MAX),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(-FLT_MAX, -FLT_MAX, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 4294967296.f), DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R32G32_UINT, XMFLOAT4(4294967296.f, 4294967296.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R32G32_UINT, XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R32G32_UINT, XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R32G32_UINT, XMFLOAT4(1.0f, 3.0f, 0.0f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R32G32_UINT, XMFLOAT4(2.0f, 3.0f, 0.0f, 1.0f), TEX_FILTER_RGB_COPY_GREEN | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32G32_SINT, XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32G32_SINT, XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32G32_SINT, XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32G32_SINT, XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32G32_SINT, XMFLOAT4(1.0f, 3.0f, 0.0f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32G32_SINT, XMFLOAT4(2.0f, 3.0f, 0.0f, 1.0f), TEX_FILTER_RGB_COPY_GREEN | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32G32_SINT, XMFLOAT4(-1.0f, -2.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
    // 4 -> 1
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.0f, 0.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.5f, 0.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.75f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, FLT_MIN),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(FLT_MIN, 0.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(FLT_MAX, 0.f, 0.f, 1.f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, -FLT_MIN),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(-FLT_MIN, 0.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, -FLT_MAX),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(-FLT_MAX, 0.f, 0.f, 1.f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 4294967296.f), DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R32_UINT, XMFLOAT4(4294967296.f, 0.f, 0.f, 1.f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R32_UINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R32_UINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R32_UINT, XMFLOAT4(2.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R32_UINT, XMFLOAT4(3.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(2.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(3.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE  },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
    // 3 -> 4
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f),                                 DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f),                              DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, 1.0f),                        DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, 1.0f),                        DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, 1.0f),                     DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, 1.0f),                     DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 1.0f),         DXGI_FORMAT_R32G32B32_UINT, DXGI_FORMAT_R32G32B32_UINT, XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_UINT, DXGI_FORMAT_R32G32B32_UINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f),                              DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, 1.0f),                              DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(-1.0f, -2.0f, -3.0f, 1.0f), TEX_FILTER_DEFAULT },
    // 3 -> 2
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f),                                 DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(1.0f, 1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f),                              DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(-1.0f, -1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.25f, 0.75f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.5f, 0.75f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, 1.0f),                        DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, 1.0f),                        DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(FLT_MAX, FLT_MAX, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, 1.0f),                     DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(-FLT_MIN, -FLT_MIN, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, 1.0f),                     DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(-FLT_MAX, -FLT_MAX, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 1.0f),         DXGI_FORMAT_R32G32B32_UINT, DXGI_FORMAT_R32G32_UINT, XMFLOAT4(4294967296.f, 4294967296.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_UINT, DXGI_FORMAT_R32G32_UINT, XMFLOAT4(1.0f, 2.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_UINT, DXGI_FORMAT_R32G32_UINT, XMFLOAT4(1.0f, 2.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_UINT, DXGI_FORMAT_R32G32_UINT, XMFLOAT4(1.0f, 3.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_UINT, DXGI_FORMAT_R32G32_UINT, XMFLOAT4(2.0f, 3.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32G32_SINT, XMFLOAT4(1.0f, 1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f),                              DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32G32_SINT, XMFLOAT4(-1.0f, -1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32G32_SINT, XMFLOAT4(1.0f, 2.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32G32_SINT, XMFLOAT4(1.0f, 2.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_GREEN  },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32G32_SINT, XMFLOAT4(1.0f, 3.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32G32_SINT, XMFLOAT4(2.0f, 3.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, 1.0f),                              DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32G32_SINT, XMFLOAT4(-1.0f, -2.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
    // 3 -> 1
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f),                                 DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f),                              DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.75f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, 1.0f),                        DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(FLT_MIN, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, 1.0f),                        DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(FLT_MAX, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, 1.0f),                     DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(-FLT_MIN, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, 1.0f),                     DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(-FLT_MAX, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 1.0f),         DXGI_FORMAT_R32G32B32_UINT, DXGI_FORMAT_R32_UINT, XMFLOAT4(4294967296.f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_UINT, DXGI_FORMAT_R32_UINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_UINT, DXGI_FORMAT_R32_UINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_UINT, DXGI_FORMAT_R32_UINT, XMFLOAT4(2.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_UINT, DXGI_FORMAT_R32_UINT, XMFLOAT4(3.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE  },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f),                              DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f),                              DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(2.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(3.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, 1.0f),                              DXGI_FORMAT_R32G32B32_SINT, DXGI_FORMAT_R32_SINT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
    // 2 -> 4
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.0f),                               DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.0f, 1.0f),                                DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, FLT_MIN, 0.0f, 1.0f),                           DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, 0.0f, 1.0f),                           DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(FLT_MAX, FLT_MAX, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, 0.0f, 1.0f),                         DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-FLT_MIN, -FLT_MIN, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, 0.0f, 1.0f),                         DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-FLT_MAX, -FLT_MAX, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(4294967296.f, 4294967296.f, 0.0f, 1.0f),                 DXGI_FORMAT_R32G32_UINT, DXGI_FORMAT_R32G32B32A32_UINT,   XMFLOAT4(4294967296.f, 4294967296.f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_UINT, DXGI_FORMAT_R32G32B32A32_UINT,   XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_SINT, DXGI_FORMAT_R32G32B32A32_SINT,   XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.0f),                               DXGI_FORMAT_R32G32_SINT, DXGI_FORMAT_R32G32B32A32_SINT,   XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_SINT, DXGI_FORMAT_R32G32B32A32_SINT,   XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -2.0f, 0.0f, 1.0f),                               DXGI_FORMAT_R32G32_SINT, DXGI_FORMAT_R32G32B32A32_SINT,   XMFLOAT4(-1.0f, -2.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
    // 2 -> 3
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.0f),                               DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.0f, 1.0f),                                DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, FLT_MIN, 0.0f, 1.0f),                           DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, 0.0f, 1.0f),                           DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(FLT_MAX, FLT_MAX, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, 0.0f, 1.0f),                         DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(-FLT_MIN, -FLT_MIN, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, 0.0f, 1.0f),                         DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(-FLT_MAX, -FLT_MAX, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(4294967296.f, 4294967296.f, 0.0f, 1.0f),                 DXGI_FORMAT_R32G32_UINT, DXGI_FORMAT_R32G32B32_UINT,   XMFLOAT4(4294967296.f, 4294967296.f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_UINT, DXGI_FORMAT_R32G32B32_UINT,   XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_SINT, DXGI_FORMAT_R32G32B32_SINT,   XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.0f),                               DXGI_FORMAT_R32G32_SINT, DXGI_FORMAT_R32G32B32_SINT,   XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_SINT, DXGI_FORMAT_R32G32B32_SINT,   XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -2.0f, 0.0f, 1.0f),                               DXGI_FORMAT_R32G32_SINT, DXGI_FORMAT_R32G32B32_SINT,   XMFLOAT4(-1.0f, -2.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
    // 2 -> 1
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.0f),                               DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.0f, 1.0f),                                DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, FLT_MIN, 0.0f, 1.0f),                           DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, 0.0f, 1.0f),                           DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, 0.0f, 1.0f),                         DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(-FLT_MIN, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, 0.0f, 1.0f),                         DXGI_FORMAT_R32G32_FLOAT, DXGI_FORMAT_R32_FLOAT, XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(4294967296.f, 4294967296.f, 0.0f, 1.0f),                 DXGI_FORMAT_R32G32_UINT, DXGI_FORMAT_R32_UINT,   XMFLOAT4(4294967296.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_UINT, DXGI_FORMAT_R32_UINT,   XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_SINT, DXGI_FORMAT_R32_SINT,   XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, 0.0f, 1.0f),                               DXGI_FORMAT_R32G32_SINT, DXGI_FORMAT_R32_SINT,   XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32G32_SINT, DXGI_FORMAT_R32_SINT,   XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -2.0f, 0.0f, 1.0f),                               DXGI_FORMAT_R32G32_SINT, DXGI_FORMAT_R32_SINT,   XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
    // 1 -> 4
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f),                                DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f),                                DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.25f, 0.25f, 0.25f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f),                              DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f),                              DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 0.0f, 0.0f, 1.0f),                             DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f),                             DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(4294967296.f, 0.0f, 0.0f, 1.0f),                         DXGI_FORMAT_R32_UINT, DXGI_FORMAT_R32G32B32A32_UINT,   XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32_UINT, DXGI_FORMAT_R32G32B32A32_UINT,   XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32_SINT, DXGI_FORMAT_R32G32B32A32_SINT,   XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f),                                DXGI_FORMAT_R32_SINT, DXGI_FORMAT_R32G32B32A32_SINT,   XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f), TEX_FILTER_DEFAULT },
    // 1 -> 3
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f),                                DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f),                                DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(0.25f, 0.25f, 0.25f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f),                              DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f),                              DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 0.0f, 0.0f, 1.0f),                             DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f),                             DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32B32_FLOAT, XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(4294967296.f, 0.0f, 0.0f, 1.0f),                         DXGI_FORMAT_R32_UINT, DXGI_FORMAT_R32G32B32_UINT,   XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32_UINT, DXGI_FORMAT_R32G32B32_UINT,   XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32_SINT, DXGI_FORMAT_R32G32B32_SINT,   XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f),                                DXGI_FORMAT_R32_SINT, DXGI_FORMAT_R32G32B32_SINT,   XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f), TEX_FILTER_DEFAULT },
    // 1 -> 2
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(1.0f, 1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f),                                DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(-1.0f, -1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f),                                DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(0.25f, 0.25f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f),                              DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f),                              DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(FLT_MAX, FLT_MAX, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 0.0f, 0.0f, 1.0f),                             DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(-FLT_MIN, -FLT_MIN, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f),                             DXGI_FORMAT_R32_FLOAT, DXGI_FORMAT_R32G32_FLOAT, XMFLOAT4(-FLT_MAX, -FLT_MAX, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(4294967296.f, 0.0f, 0.0f, 1.0f),                         DXGI_FORMAT_R32_UINT, DXGI_FORMAT_R32G32_UINT,   XMFLOAT4(4294967296.f, 4294967296.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32_UINT, DXGI_FORMAT_R32G32_UINT,   XMFLOAT4(1.0f, 1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                                 DXGI_FORMAT_R32_SINT, DXGI_FORMAT_R32G32_SINT,   XMFLOAT4(1.0f, 1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f),                                DXGI_FORMAT_R32_SINT, DXGI_FORMAT_R32G32_SINT,   XMFLOAT4(-1.0f, -1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    //--- Channels & bit-depth --------------------------------------------------------

    // FLOAT (3-channel)
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R11G11B10_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R11G11B10_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R11G11B10_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R11G11B10_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R11G11B10_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, FLT_MIN),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R11G11B10_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R11G11B10_FLOAT, XMFLOAT4(65024.f, 65024.f, 64512.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, -FLT_MIN),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R11G11B10_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, -FLT_MAX),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R11G11B10_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.f), TEX_FILTER_DEFAULT },

    // FLOAT (2-channel)
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(1.0f, 1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(-1.0f, -1.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(0.25f, 0.5f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(0.25f, 0.75f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(0.5f, 0.75f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, FLT_MIN),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(65504.f, 65504.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, -FLT_MIN),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(-FLT_MIN, -FLT_MIN, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, -FLT_MAX),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16G16_FLOAT, XMFLOAT4(-65504.f, -65504.f, 0.f, 1.f), TEX_FILTER_DEFAULT },

    // FLOAT (1-channel)
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16_FLOAT, XMFLOAT4(0.0f, 0.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16_FLOAT, XMFLOAT4(0.5f, 0.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16_FLOAT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16_FLOAT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16_FLOAT, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16_FLOAT, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16_FLOAT, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16_FLOAT, XMFLOAT4(0.75f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, FLT_MIN),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16_FLOAT, XMFLOAT4(FLT_MIN, 0.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16_FLOAT, XMFLOAT4(65504.f, 0.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, -FLT_MIN),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16_FLOAT, XMFLOAT4(-FLT_MIN, 0.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, -FLT_MAX),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_R16_FLOAT, XMFLOAT4(-65504.f, 0.f, 0.f, 1.f), TEX_FILTER_DEFAULT },

    // UNORM (2-channel)
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16_UNORM, XMFLOAT4(0.5f, 0.5f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16_UNORM, XMFLOAT4(1.0f, 1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16_UNORM, XMFLOAT4(0.25f, 0.5f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16_UNORM, XMFLOAT4(0.25f, 0.5f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16_UNORM, XMFLOAT4(0.25f, 0.75f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16_UNORM, XMFLOAT4(0.5f, 0.75f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8G8_UNORM, XMFLOAT4(0.501961f, 0.501961f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8G8_UNORM, XMFLOAT4(0.5f, 0.5f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8G8_UNORM, XMFLOAT4(1.0f, 1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8G8_UNORM, XMFLOAT4(0.25f, 0.5f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8G8_UNORM, XMFLOAT4(0.25f, 0.5f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8G8_UNORM, XMFLOAT4(0.25f, 0.75f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8G8_UNORM, XMFLOAT4(0.5f, 0.75f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN | TEX_FILTER_RGB_COPY_BLUE },

    // UNORM (1-channel)
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16_UNORM, XMFLOAT4(0.499992f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16_UNORM, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16_UNORM, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16_UNORM, XMFLOAT4(0.464897f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16_UNORM, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16_UNORM, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16_UNORM, XMFLOAT4(0.75f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8_UNORM, XMFLOAT4(0.498039f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8_UNORM, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8_UNORM, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8_UNORM, XMFLOAT4(0.462745f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8_UNORM, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8_UNORM, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R8_UNORM, XMFLOAT4(0.75f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },

    // SNORM (2-channel)
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(0.5f, 0.5f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(1.0f, 1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(0.25f, 0.5f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(0.25f, 0.5f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(0.25f, 0.75f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(0.5f, 0.75f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f),                             DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(-0.5f, -0.5f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(-1.0f, -1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.25f, -0.5f, -0.75f, -1.0f),                           DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16_SNORM, XMFLOAT4(-0.25f, -0.5f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(0.5f, 0.5f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(1.0f, 1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(0.25f, 0.5f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(0.25f, 0.5f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(0.25f, 0.75f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(0.5f, 0.75f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f),                             DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(-0.5f, -0.5f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(-1.0f, -1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.25f, -0.5f, -0.75f, -1.0f),                           DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8G8_SNORM, XMFLOAT4(-0.25f, -0.5f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    // SNORM (1-channel)
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16_SNORM, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16_SNORM, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16_SNORM, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16_SNORM, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16_SNORM, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16_SNORM, XMFLOAT4(0.75f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f),                             DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16_SNORM, XMFLOAT4(-0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16_SNORM, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.25f, -0.5f, -0.75f, -1.0f),                           DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16_SNORM, XMFLOAT4(-0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8_SNORM, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8_SNORM, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8_SNORM, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8_SNORM, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8_SNORM, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8_SNORM, XMFLOAT4(0.75f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f),                             DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8_SNORM, XMFLOAT4(-0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8_SNORM, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.25f, -0.5f, -0.75f, -1.0f),                           DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R8_SNORM, XMFLOAT4(-0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    // UINT (2-channel)
        { XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 4294967296.f), DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R16G16_UINT, XMFLOAT4(65535.f, 65535.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R16G16_UINT, XMFLOAT4(1.0f, 2.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R16G16_UINT, XMFLOAT4(1.0f, 2.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R16G16_UINT, XMFLOAT4(1.0f, 3.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R16G16_UINT, XMFLOAT4(2.0f, 3.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 4294967296.f), DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R8G8_UINT, XMFLOAT4(255.f, 255.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R8G8_UINT, XMFLOAT4(1.0f, 2.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R8G8_UINT, XMFLOAT4(1.0f, 2.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_GREEN  },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R8G8_UINT, XMFLOAT4(1.0f, 3.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R8G8_UINT, XMFLOAT4(2.0f, 3.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN | TEX_FILTER_RGB_COPY_BLUE },

    // UINT (1-channel)
        { XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 4294967296.f), DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R16_UINT, XMFLOAT4(65535.f, 0.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R16_UINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R16_UINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R16_UINT, XMFLOAT4(2.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R16_UINT, XMFLOAT4(3.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE  },
        { XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 4294967296.f), DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R8_UINT, XMFLOAT4(255.f, 0.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R8_UINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R8_UINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R8_UINT, XMFLOAT4(2.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_UINT, DXGI_FORMAT_R8_UINT, XMFLOAT4(3.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE  },

    // SINT (2-channel)
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R16G16_SINT, XMFLOAT4(1.0f, 1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R16G16_SINT, XMFLOAT4(-1.0f, -1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R16G16_SINT, XMFLOAT4(1.0f, 2.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R16G16_SINT, XMFLOAT4(1.0f, 2.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R16G16_SINT, XMFLOAT4(1.0f, 3.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R16G16_SINT, XMFLOAT4(2.0f, 3.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R16G16_SINT, XMFLOAT4(-1.0f, -2.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R8G8_SINT, XMFLOAT4(1.0f, 1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R8G8_SINT, XMFLOAT4(-1.0f, -1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R8G8_SINT, XMFLOAT4(1.0f, 2.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R8G8_SINT, XMFLOAT4(1.0f, 2.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_GREEN  },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R8G8_SINT, XMFLOAT4(1.0f, 3.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R8G8_SINT, XMFLOAT4(2.0f, 3.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN | TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R8G8_SINT, XMFLOAT4(-1.0f, -2.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    // SINT (1-channel)
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R16_SINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R16_SINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R16_SINT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R16_SINT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R16_SINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R16_SINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R16_SINT, XMFLOAT4(2.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R16_SINT, XMFLOAT4(3.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R16_SINT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R8_SINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R8_SINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R8_SINT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R8_SINT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R8_SINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R8_SINT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R8_SINT, XMFLOAT4(2.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                                 DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R8_SINT, XMFLOAT4(3.0f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f),                             DXGI_FORMAT_R32G32B32A32_SINT, DXGI_FORMAT_R8_SINT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    //--- Types -----------------------------------------------------------------------

    // UNORM -> SNORM
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
    // UNORM -> UINT
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
    // UNORM -> SINT
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
    // UNORM -> FLOAT
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
    // SNORM -> UNORM
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f),                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.25f, 0.25f, 0.25f, 0.25f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.75f, 0.75, 0.75f, 0.75f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
    // SNORM -> UINT
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f),                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
    // SNORM -> SINT
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f),                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
    // SNORM -> FLOAT
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f),                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
    // UINT -> UNORM
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                 DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f),         DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(65536.f, 65536.f, 65536.f, 65536.f),         DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
    // UINT -> SNORM
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                 DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f),         DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(65536.f, 65536.f, 65536.f, 65536.f),         DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
    // UINT -> SINT
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                 DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(255.f, 255.f, 255.f, 255.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f),         DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(65536.f, 65536.f, 65536.f, 65536.f),         DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f), TEX_FILTER_DEFAULT },
    // UINT -> FLOAT
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                 DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(255.f, 255.f, 255.f, 255.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f),         DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(32768.f, 32768.f, 32768.f, 32768.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(65504.f, 65504.f, 65504.f, 65504.f),         DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(65504.f, 65504.f, 65504.f, 65504.f), TEX_FILTER_DEFAULT },
    // SINT -> UNORM
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, -255.f, -255.f, -255.f),             DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f),         DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-32767.f, -32767.f, -32767.f, -32767.f),     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
    // SINT -> SNORM
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, -255.f, -255.f, -255.f),             DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f),         DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-32767.f, -32767.f, -32767.f, -32767.f),     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
    // SINT -> UINT
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(255.f, 255.f, 255.f, 255.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, -255.f, -255.f, -255.f),             DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f),         DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-32767.f, -32767.f, -32767.f, -32767.f),     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
    // SINT -> FLOAT
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(255.f, 255.f, 255.f, 255.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, -255.f, -255.f, -255.f),             DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(-255.f, -255.f, -255.f, -255.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f),         DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(32768.f, 32768.f, 32768.f, 32768.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-32767.f, -32767.f, -32767.f, -32767.f),     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(-32768.f, -32768.f, -32768.f, -32768.f), TEX_FILTER_DEFAULT },
    // FLOAT -> UNORM
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                 DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, -255.f, -255.f, -255.f),             DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f),         DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-32767.f, -32767.f, -32767.f, -32767.f),     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(65504.f, 65504.f, 65504.f, 65504.f),         DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-65504.f, -65504.f, -65504.f, -65504.f),     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
    // FLOAT -> SNORM
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                 DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, -255.f, -255.f, -255.f),             DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f),         DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-32767.f, -32767.f, -32767.f, -32767.f),     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(65504.f, 65504.f, 65504.f, 65504.f),         DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-65504.f, -65504.f, -65504.f, -65504.f),     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
    // FLOAT -> UINT
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                 DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(255.f, 255.f, 255.f, 255.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, -255.f, -255.f, -255.f),             DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f),         DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-32767.f, -32767.f, -32767.f, -32767.f),     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(65504.f, 65504.f, 65504.f, 65504.f),         DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(65504.f, 65504.f, 65504.f, 65504.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-65504.f, -65504.f, -65504.f, -65504.f),     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
    // FLOAT -> SINT
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                 DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(255.f, 255.f, 255.f, 255.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, -255.f, -255.f, -255.f),             DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(-255.f, -255.f, -255.f, -255.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f),         DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-32767.f, -32767.f, -32767.f, -32767.f),     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(-32767.f, -32767.f, -32767.f, -32767.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(65504.f, 65504.f, 65504.f, 65504.f),         DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(32767.f, 32767.f, 32767.f, 32767.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-65504.f, -65504.f, -65504.f, -65504.f),     DXGI_FORMAT_R16G16B16A16_FLOAT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(-32767.f, -32767.f, -32767.f, -32767.f), TEX_FILTER_DEFAULT },

    //--- Alpha -----------------------------------------------------------------------
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_A8_UNORM, XMFLOAT4(0.f, 0.f, 0.f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_A8_UNORM, XMFLOAT4(0.f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

        { XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f),                     DXGI_FORMAT_B8G8R8X8_UNORM, DXGI_FORMAT_A8_UNORM, XMFLOAT4(0.f, 0.f, 0.f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_B8G8R8X8_UNORM, DXGI_FORMAT_A8_UNORM, XMFLOAT4(0.f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_B8G8R8X8_UNORM, DXGI_FORMAT_A8_UNORM, XMFLOAT4(0.f, 0.f, 0.f, 0.462745f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_B8G8R8X8_UNORM, DXGI_FORMAT_A8_UNORM, XMFLOAT4(0.f, 0.f, 0.f, 0.25f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_B8G8R8X8_UNORM, DXGI_FORMAT_A8_UNORM, XMFLOAT4(0.f, 0.f, 0.f, 0.5f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_B8G8R8X8_UNORM, DXGI_FORMAT_A8_UNORM, XMFLOAT4(0.f, 0.f, 0.f, 0.75f), TEX_FILTER_RGB_COPY_BLUE },

        { XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_R8_UNORM, DXGI_FORMAT_A8_UNORM, XMFLOAT4(0.f, 0.f, 0.f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_R8_UNORM, DXGI_FORMAT_A8_UNORM, XMFLOAT4(0.f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_R8_UNORM, DXGI_FORMAT_A8_UNORM, XMFLOAT4(0.f, 0.f, 0.f, 0.247059f), TEX_FILTER_DEFAULT },

        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.5f),                     DXGI_FORMAT_A8_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_A8_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.25f),                    DXGI_FORMAT_A8_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.25f), TEX_FILTER_DEFAULT },

        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.5f),                     DXGI_FORMAT_A8_UNORM, DXGI_FORMAT_B8G8R8X8_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_A8_UNORM, DXGI_FORMAT_B8G8R8X8_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.25f),                    DXGI_FORMAT_A8_UNORM, DXGI_FORMAT_B8G8R8X8_UNORM, XMFLOAT4(0.25f, 0.25f, 0.25f, 1.0f), TEX_FILTER_DEFAULT },

        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.5f),                     DXGI_FORMAT_A8_UNORM, DXGI_FORMAT_R8_UNORM, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_A8_UNORM, DXGI_FORMAT_R8_UNORM, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.25f),                    DXGI_FORMAT_A8_UNORM, DXGI_FORMAT_R8_UNORM, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    //--- BGRA ----------------------------------------------------------------------------

        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_B8G8R8A8_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_B8G8R8A8_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_B8G8R8A8_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },

        { XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f),                     DXGI_FORMAT_B8G8R8X8_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_B8G8R8X8_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_B8G8R8X8_UNORM, DXGI_FORMAT_R8G8B8A8_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },

        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_B8G8R8A8_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_B8G8R8A8_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_B8G8R8A8_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },

        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_B8G8R8X8_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_B8G8R8X8_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R8G8B8A8_UNORM, DXGI_FORMAT_B8G8R8X8_UNORM, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },

    //--- Depth ---------------------------------------------------------------------------

    // D32 -> D16
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, 0.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 0.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D32 -> D24X8
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, 0.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 0.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D32 -> D32X8
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(255.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, 0.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-255.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 0.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-FLT_MIN, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D16 -> D32
        { XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D16 -> D24X8
        { XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D16 -> D32X8
        { XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D24X8 -> D32
        { XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.5f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4( 0.5f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 1.0f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4( 1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4( 0.0f, 0.f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.5f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4( 0.5f, 0.f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 1.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4( 1.0f, 0.f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D24X8 -> D32X8
        { XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4( 0.0f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.5f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4( 0.5f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 1.0f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4( 1.0f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4( 0.0f, 255.f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.5f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4( 0.5f, 255.f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 1.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4( 1.0f, 255.f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D24X8 -> D16
        { XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.5f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4( 0.5f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 1.0f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4( 1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4( 0.0f, 0.f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.5f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4( 0.5f, 0.f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 1.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4( 1.0f, 0.f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D32X8 -> D32
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 1.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(255.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, 1.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-255.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 1.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 1.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 1.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-FLT_MIN, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 1.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 255.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 255.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 255.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 255.0f, 0.0f, 1.0f),                DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 255.0f, 0.0f, 1.0f),                DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 255.0f, 0.0f, 1.0f),               DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-FLT_MIN, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 255.0f, 0.0f, 1.0f),               DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D32X8 -> D16
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 1.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, 1.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 1.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 1.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 1.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 1.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 255.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 255.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 255.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 255.0f, 0.0f, 1.0f),                DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 255.0f, 0.0f, 1.0f),                DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 255.0f, 0.0f, 1.0f),               DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 255.0f, 0.0f, 1.0f),               DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D32X8 -> D24X8
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 1.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.5f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.25f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, 1.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.0f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 1.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(FLT_MIN, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 1.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 1.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 1.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.f, 1.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 255.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.0f, 255.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 255.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.5f, 255.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 255.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 255.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.f, 255.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.25f, 255.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 255.0f, 0.0f, 1.0f),                DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(FLT_MIN, 255.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 255.0f, 0.0f, 1.0f),                DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.f, 255.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 255.0f, 0.0f, 1.0f),               DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.f, 255.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 255.0f, 0.0f, 1.0f),               DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.f, 255.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },

    //--- Depth -> Color ------------------------------------------------------------------

    // D32 -> RGBA (float)
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.25f, 0.25f, 0.25f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(255.f, 255.f, 255.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, 0.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-255.f, -255.f, -255.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 0.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, 1.0f), TEX_FILTER_DEFAULT },

    // D32 -> RGBA (unorm)
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.500008f, 0.500008f, 0.500008f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.25f, 0.25f, 0.25f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 0.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D32 -> RGBA (snorm)
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.500015f, 0.500015f, 0.500015f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f , 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.250008f, 0.250008f, 0.250008f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 0.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 0.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D32 -> RGBA (uint)
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4(255.f, 255.f, 255.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4(4294967296.f, 4294967296.f, 4294967296.f, 1.0f), TEX_FILTER_DEFAULT },

    // D32 -> RGBA (sint)
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(255.f, 255.f, 255.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, 0.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(-255.f, -255.f, -255.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 0.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(2147483648.f, 2147483648.f, 2147483648.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 0.0f, 0.0f, 1.0f),                 DXGI_FORMAT_D32_FLOAT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4(-2147483648.f, -2147483648.f, -2147483648.f, 1.0f), TEX_FILTER_DEFAULT },

    // D16 -> RGBA (float)
        { XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_R16G16B16A16_FLOAT, XMFLOAT4(0.25f, 0.25f, 0.25f, 1.0f), TEX_FILTER_DEFAULT },

    // D16 -> RGBA (unorm)
        { XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.5f, 0.5f, 0.5f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.25f, 0.25f, 0.25f, 1.0f), TEX_FILTER_DEFAULT },

    // D16 -> RGBA (snorm)
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-0.500015f, -0.500015f, -0.500015f, 1.0f), TEX_FILTER_DEFAULT },

    // D16 -> RGBA (uint)
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D16 -> RGBA (sint)
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 0.0f, 0.0f, 1.0f),                     DXGI_FORMAT_D16_UNORM, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D32X8 -> RGBA (float)
        { XMFLOAT4(0.0f, 1.0f, 0.0f, 0.f),                      DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 2.0f, 0.0f, 0.f),                      DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 2.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 3.0f, 0.0f, 0.f),                      DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 3.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f ,4.0f, 0.0f, 0.f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-1.0f, -1.0f, -1.0f, 4.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 5.0f, 0.0f, 0.f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.25f, 0.25f, 0.25f, 5.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 6.0f, 0.0f, 0.f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(255.f, 255.f, 255.f, 6.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, 6.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-255.f, -255.f, -255.f, 6.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 6.0f, 0.0f, 0.f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, 6.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 7.0f, 0.0f, 0.f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, 7.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 8.0f, 0.0f, 0.f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, 8.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 9.0f, 0.0f, 0.f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, 9.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 128.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(0.5f, 0.5f, 0.5f, 128.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 255.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4(1.0f, 1.0f, 1.0f, 255.0f), TEX_FILTER_DEFAULT },

    // D32X8 -> RGBA (unorm)
        { XMFLOAT4(0.0f, 64.0f, 0.0f, 0.0f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.25f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 64.0f, 0.0f, 0.f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.500008f, 0.500008f, 0.500008f, 0.25f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 64.0f, 0.0f, 0.f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 0.25f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 64.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.25f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 64.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.25f, 0.25f, 0.25f, 0.25f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 64.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 0.25f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, 64.0f, 0.0f, 0.f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.25f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 64.0f, 0.0f, 0.f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, 0.25f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 64.0f, 0.0f, 0.f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 0.25f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 64.0f, 0.0f, 0.f),                 DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.25f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 64.0f, 0.0f, 0.f),                 DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.25f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 127.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(0.500008f, 0.500008f, 0.500008f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 255.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D32X8 -> RGBA (snorm)
        { XMFLOAT4(0.0f, 64.0f, 0.0f, 0.0f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, -0.498032f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 64.0f, 0.0f, 0.f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.500015f, 0.500015f, 0.500015f, -0.498032f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 64.0f, 0.0f, 0.f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, -0.498032f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 64.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, -0.498032f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 64.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.25f, 0.25f, 0.25f, -0.498032f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 64.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, -0.498032f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, 64.0f, 0.0f, 0.f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, -0.498032f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, 64.0f, 0.0f, 0.f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, -0.498032f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 64.0f, 0.0f, 0.f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, -0.498032f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, 64.0f, 0.0f, 0.f),                 DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, -0.498032f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 64.0f, 0.0f, 0.f),                 DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(-1.0f, -1.0f, -1.0f, -0.498032f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.0f, 0.0f, 0.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 128.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(0.500015f, 0.500008f, 0.500008f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 255.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D32X8 -> RGBA (uint)
        { XMFLOAT4(0.0f, 64.0f, 0.0f, 0.0f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 64.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 64.0f, 0.0f, 0.f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 64.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 64.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 64.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 64.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(255.0f, 255.f, 255.f, 64.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, 64.0f, 0.0f, 0.f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.f, 0.f, 0.f, 64.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 64.0f, 0.0f, 0.f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(65535.0f, 65535.0f, 65535.0f, 64.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 64.0f, 0.0f, 0.f),                 DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 64.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(64.f, 128.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(64.f, 64.f, 64.f, 128.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(96.f, 255.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_UINT, XMFLOAT4(96.f, 96.f, 96.f, 255.0f), TEX_FILTER_DEFAULT },

    // D32X8 -> RGBA (sint)
        { XMFLOAT4(0.0f, 64.0f, 0.0f, 0.0f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 64.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 64.0f, 0.0f, 0.f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(1.0f, 1.0f, 1.0f, 64.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, 64.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(-1.0f, -1.0f, -1.0f, 64.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(255.f, 64.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(255.f, 255.f, 255.f, 64.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, 64.0f, 0.0f, 0.f),                   DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(-255.f, -255.f, -255.f, 64.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, 64.0f, 0.0f, 0.f),                  DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(32767.0f, 32767.0f, 32767.0f, 64.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, 64.0f, 0.0f, 0.f),                 DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(-32767.f, -32767.f, -32767.f, 64.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(64.f, 128.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(64.f, 64.f, 64.f, 128.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(96.f, 255.0f, 0.0f, 0.f),                    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, DXGI_FORMAT_R16G16B16A16_SINT, XMFLOAT4(96.f, 96.f, 96.f, 255.0f), TEX_FILTER_DEFAULT },

    // D24X8 -> RGBA (float)
        { XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.5f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4( 0.5f, 0.5f, 0.5f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 1.0f, 1.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4( 1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 128.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 128.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 255.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.5f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4( 0.5f, 0.5f, 0.5f, 255.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 1.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_FLOAT, XMFLOAT4( 1.0f, 1.0f, 1.0f, 255.0f), TEX_FILTER_DEFAULT },

    // D24X8 -> RGBA (unorm)
        { XMFLOAT4( 0.0f, 64.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4( 0.0f, 0.0f, 0.0f, 0.25f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 64.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4( 0.0f, 0.0f, 0.0f, 0.25f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.5f, 64.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4( 0.5f, 0.5f, 0.5f, 0.25f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 1.0f, 64.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4( 1.0f, 1.0f, 1.0f, 0.25f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4( 0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 128.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4( 0.0f, 0.0f, 0.0f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.5f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4( 0.5f, 0.5f, 0.5f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 1.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_UNORM, XMFLOAT4( 1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D24X8 -> RGBA (snorm)
        { XMFLOAT4( 0.0f, 64.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4( -1.0f, -1.0f, -1.0f, -0.498032f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 64.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4( -1.0f, -1.0f, -1.0f, -0.498032f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.5f, 64.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4( 0.0f, 0.0f, 0.0f, -0.498032f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 1.0f, 64.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4( 1.0f, 1.0f, 1.0f, -0.498032f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4( -1.0f, -1.0f, -1.0f, -1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 128.f, 0.0f, 1.0f),                   DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4( -1.0f, -1.0f, -1.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4( -1.0f, -1.0f, -1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.5f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 1.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R16G16B16A16_SNORM, XMFLOAT4( 1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },

    // D24X8 -> RGBA (uint)
        { XMFLOAT4( 0.0f, 64.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 64.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 64.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 64.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 1.0f, 64.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4( 1.0f, 1.0f, 1.0f, 64.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 128.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 128.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 255.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 1.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_UINT, XMFLOAT4( 1.0f, 1.0f, 1.0f, 255.0f), TEX_FILTER_DEFAULT },

    // D24X8 -> RGBA (sint)
        { XMFLOAT4( 0.0f, 64.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 64.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 64.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 64.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 1.0f, 64.0f, 0.0f, 1.0f),                   DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4( 1.0f, 1.0f, 1.0f, 64.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 0.0f, 0.0f, 1.0f),                    DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 128.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 128.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 0.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4( 0.0f, 0.0f, 0.0f, 255.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4( 1.0f, 255.0f, 0.0f, 1.0f),                  DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R32G32B32A32_SINT, XMFLOAT4( 1.0f, 1.0f, 1.0f, 255.0f), TEX_FILTER_DEFAULT },

    //--- Color -> Depth ------------------------------------------------------------------

    // RGBA (float) -> D32
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.75f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(255.f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, -255.f, -255.f, -255.f),             DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-255.f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, FLT_MIN),         DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(FLT_MIN, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX),         DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(FLT_MAX, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, -FLT_MIN),     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-FLT_MIN, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, -FLT_MAX),     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-FLT_MAX, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    // RGBA (unorm) -> D32
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.5f, 0.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(1.0f, 0.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.464900f, 0.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.25f, 0.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.5f, 0.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.75f, 0.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_BLUE },

    // RGBA (snorm) -> D32
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.5f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(1.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.25f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.25f, 0.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.5f, 0.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(0.75f, 0.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f),                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-0.5f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-1.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.25f, -0.5f, -0.75f, -1.0f),               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-0.25f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    // RGBA (uint) -> D32
        { XMFLOAT4(65535.f, 65535.f, 65535.f, 65535.f),         DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(65535.f, 0.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(1.0f, 0.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(1.0f, 0.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(2.0f, 0.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(3.0f, 0.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_BLUE },

    // RGBA (sint) -> D32
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(1.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-1.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(1.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(1.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(2.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 4.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(3.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, -4.0f),                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT, XMFLOAT4(-1.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    // RGBA (float) -> D16
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.25f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.5f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.75f, 0.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, -255.f, -255.f, -255.f),             DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, FLT_MIN),         DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(FLT_MIN, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX),         DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, -FLT_MIN),     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(-FLT_MIN, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, -FLT_MAX),     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    // RGBA (unorm) -> D16
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.5f, 0.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.0f, 0.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.464900f, 0.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.25f, 0.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.5f, 0.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.75f, 0.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_BLUE },

    // RGBA (snorm) -> D16
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.749996f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.624994f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.624994f, 0.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.749996f, 0.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.874998f, 0.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f),                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.250004f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.25f, -0.5f, -0.75f, -1.0f),               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.375006f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    // RGBA (uint) -> D16
        { XMFLOAT4(65535.f, 65535.f, 65535.f, 65535.f),         DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.0f, 0.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.0f, 0.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },

    // RGBA (sint) -> D16
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(1.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D16_UNORM, XMFLOAT4(0.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    // RGBA (float) -> D32X8
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 64.f),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.5f, 64.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 128.0f),                   DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 128.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-1.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 64.0f),                  DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.25f, 64.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 64.0f),                  DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.25f, 64.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 64.0f),                  DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.5f, 64.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 64.0f),                  DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.75f, 64.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, FLT_MIN),         DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(FLT_MIN, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX),         DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(FLT_MAX, 255.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, -FLT_MIN),     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-FLT_MIN, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, -FLT_MAX),     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-FLT_MAX, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    // RGBA (unorm) -> D32X8
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.5f, 127.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 255.f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.464900f, 255.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.25f, 255.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.5f, 255.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.75f, 255.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_BLUE },

    // RGBA (snorm) -> D32X8
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.5f, 191.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 255.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(0.25f, 255.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f),                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-0.5f, 63.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-1.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.25f, -0.5f, -0.75f, -1.0f),               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-0.25f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    // RGBA (uint) -> D32X8
        { XMFLOAT4(65535.f, 65535.f, 65535.f, 65535.f),         DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(65535.f, 255.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 255.0f),                   DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 255.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 127.0f),                   DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 127.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 0.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 64.0f),                    DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 64.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 64.0f),                    DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 64.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 64.0f),                    DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(2.0f, 64.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 64.0f),                    DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(3.0f, 64.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_BLUE },

    // RGBA (sint) -> D32X8
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-1.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 255.0f),                   DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 255.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 127.0f),                   DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 127.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 64.0f),                    DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 64.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 64.0f),                    DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(1.0f, 64.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 64.0f),                    DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(2.0f, 64.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(1.0f, 2.0f, 3.0f, 64.0f),                    DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(3.0f, 64.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(-1.0f, -2.0f, -3.0f, -64.0f),                DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D32_FLOAT_S8X24_UINT, XMFLOAT4(-1.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    // RGBA (float) -> D24X8
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 64.0f),                    DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.5f, 64.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 128.0f),                   DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 128.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 64.0f),                  DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.25f, 64.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 64.0f),                  DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.25f, 64.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 64.0f),                  DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.5f, 64.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 64.0f),                  DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.75f, 64.f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(255.f, 255.f, 255.f, 255.f),                 DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.f, 255.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-255.f, -255.f, -255.f, -255.f),             DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MIN, FLT_MIN, FLT_MIN, FLT_MIN),         DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(FLT_MIN, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX),         DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 255.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MIN, -FLT_MIN, -FLT_MIN, -FLT_MIN),     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(-FLT_MIN, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-FLT_MAX, -FLT_MAX, -FLT_MAX, -FLT_MAX),     DXGI_FORMAT_R32G32B32A32_FLOAT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.0f, 0.f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    // RGBA (unorm) -> D24X8
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.5f, 127.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 255.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.464900f, 255.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.25f, 255.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.5f, 255.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_UNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.75f, 255.0f, 0.f, 1.f), TEX_FILTER_RGB_COPY_BLUE },

    // RGBA (snorm) -> D24X8
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.749996f, 191.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 255.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.624994f, 255.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.624994f, 255.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_RED },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.749996f, 255.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_GREEN },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.874998f, 255.0f, 0.f, 1.0f), TEX_FILTER_RGB_COPY_BLUE },
        { XMFLOAT4(-0.5f, -0.5f, -0.5f, -0.5f),                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.250004f, 63.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-0.25f, -0.5f, -0.75f, -1.0f),               DXGI_FORMAT_R16G16B16A16_SNORM, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.375006f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    // RGBA (uint) -> D24X8
        { XMFLOAT4(65535.f, 65535.f, 65535.f, 65535.f),         DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 255.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 255.0f),                   DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 255.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 127.0f),                   DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 127.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_UINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 0.0f, 0.f, 1.f), TEX_FILTER_DEFAULT },

    // RGBA (sint) -> D24X8
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 1.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(-1.0f, -1.0f, -1.0f, -1.0f),                 DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(0.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 255.0f),                   DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 255.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 127.0f),                   DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 127.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 0.0f),                     DXGI_FORMAT_R16G16B16A16_SINT, DXGI_FORMAT_D24_UNORM_S8_UINT, XMFLOAT4(1.0f, 0.0f, 0.f, 1.0f), TEX_FILTER_DEFAULT },

    //--- Video -----------------------------------------------------------------------

    // AYUV
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_AYUV, DXGI_FORMAT_Y410, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_AYUV, DXGI_FORMAT_Y410, XMFLOAT4(0.501466f, 0.501466f, 0.501466f, 0.33333f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_AYUV, DXGI_FORMAT_Y410, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_AYUV, DXGI_FORMAT_Y410, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },

        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_AYUV, DXGI_FORMAT_Y416, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_AYUV, DXGI_FORMAT_Y416, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_AYUV, DXGI_FORMAT_Y416, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_AYUV, DXGI_FORMAT_Y416, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },

    // Y410
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_Y410, DXGI_FORMAT_AYUV, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f),                DXGI_FORMAT_Y410, DXGI_FORMAT_AYUV, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_Y410, DXGI_FORMAT_AYUV, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_Y410, DXGI_FORMAT_AYUV, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },

        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_Y410, DXGI_FORMAT_Y416, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f),                DXGI_FORMAT_Y410, DXGI_FORMAT_Y416, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.666667f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_Y410, DXGI_FORMAT_Y416, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_Y410, DXGI_FORMAT_Y416, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },

    // Y416
        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_Y416, DXGI_FORMAT_AYUV, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_Y416, DXGI_FORMAT_AYUV, XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_Y416, DXGI_FORMAT_AYUV, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_Y416, DXGI_FORMAT_AYUV, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },

        { XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f),                     DXGI_FORMAT_Y416, DXGI_FORMAT_Y410, XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.5f, 0.5f, 0.5f, 0.5f),                     DXGI_FORMAT_Y416, DXGI_FORMAT_Y410, XMFLOAT4(0.501466f, 0.501466f, 0.501466f, 0.33333f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f),                     DXGI_FORMAT_Y416, DXGI_FORMAT_Y410, XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f), TEX_FILTER_DEFAULT },
        { XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f),                   DXGI_FORMAT_Y416, DXGI_FORMAT_Y410, XMFLOAT4(0.25f, 0.5f, 0.75f, 1.0f), TEX_FILTER_DEFAULT },
    };

    for( size_t index=0; index < std::size(s_TestConvert); ++index )
    {
        auto& p = s_TestConvert[index];

        temp = XMLoadFloat4( &p.svector );

        ConvertScanline( &temp, 1, p.dformat, p.sformat, p.flags );

        memset( buff, 0, sizeof(buff) );
        if ( !StoreScanline( buff, sizeof(buff), p.dformat, &temp, 1, 0.25f ) )
        {
            success = false;
            printe( "Failed storing pixel format %ls, index %zu\n", GetName( p.dformat ), index );
        }
        else if ( !LoadScanline( &temp, 1, buff, sizeof(buff), p.dformat ) )
        {
            success = false;
            printe( "Failed loading pixel format %ls, index %zu\n", GetName( p.dformat ), index );
        }
        else
        {
            XMVECTOR chk = XMLoadFloat4( &p.dvector );

            if ( !XMVector4NearEqual( chk, temp, g_PixelEpsilon ) )
            {
                success = false;
                printe( "Failed converting format\n%ls (%08lX), -> %ls, index %zu:\n%f %f %f %f = %f %f %f %f\n\t\t\t\t... %f %f %f %f\n", GetName( p.sformat ), p.flags, GetName( p.dformat ), index,
                        p.svector.x, p.svector.y, p.svector.z, p.svector.w,
                        XMVectorGetX(temp), XMVectorGetY(temp), XMVectorGetZ(temp), XMVectorGetW(temp),
                        p.dvector.x, p.dvector.y, p.dvector.z, p.dvector.w );
            }
            else
            {
                ++npass;
            }
        }
    }

    print("%zu combos tested, %zu combos passed ", std::size(s_TestConvert), npass );

    return success;
}


//-------------------------------------------------------------------------------------
// Convert
bool TEXTest::Test06()
{
    bool success = true;

    size_t ncount = 0;
    size_t npass = 0;

    for( size_t index=0; index < std::size(g_TestMedia); ++index )
    {
        wchar_t szPath[MAX_PATH] = {};
        DWORD ret = ExpandEnvironmentStringsW(g_TestMedia[index].fname, szPath, MAX_PATH);
        if ( !ret ||  ret > MAX_PATH )
        {
            printe( "ERROR: ExpandEnvironmentStrings FAILED\n" );
            return false;
        }

#if defined(_DEBUG) && defined(VERBOSE)
        OutputDebugString(szPath);
        OutputDebugStringA("\n");
#endif

        // Form dest path
        wchar_t ext[_MAX_EXT];
        wchar_t fname[_MAX_FNAME];
        _wsplitpath_s( szPath, nullptr, 0, nullptr, 0, fname, _MAX_FNAME, ext, _MAX_EXT );

        wchar_t tempDir[MAX_PATH] = {};
        ret = ExpandEnvironmentStringsW(TEMP_PATH L"cvt", tempDir, MAX_PATH);
        if ( !ret || ret > MAX_PATH )
        {
            printe( "ERROR: ExpandEnvironmentStrings FAILED\n" );
            return false;
        }

        CreateDirectoryW( tempDir, nullptr );

        TexMetadata metadata;
        ScratchImage srcimage;
        HRESULT hr = LoadFromDDSFile( szPath, DDS_FLAGS_NONE, &metadata, srcimage );

        const TexMetadata* check = &g_TestMedia[index].metadata;
        if ( FAILED(hr) )
        {
            success = false;
            printe( "Failed getting DDS data from (HRESULT %08X):\n%ls\n", static_cast<unsigned int>(hr), szPath );
        }
        else if ( memcmp( &metadata, check, sizeof(TexMetadata) ) != 0 )
        {
            success = false;
            printe( "Metadata error in DDS:\n%ls\n", szPath );
            printmeta( &metadata );
            printmetachk( check );
        }
        else
        {
            print(".");

            for( UINT findex = 0; findex < std::size(g_TargetFormats); ++findex )
            {
                DXGI_FORMAT tformat = g_TargetFormats[findex].format;
                if ( tformat == metadata.format )
                    continue;

                if ( metadata.IsVolumemap() && ( IsDepthStencil(tformat) || IsVideo(tformat) ) )
                    continue;

                if ( metadata.IsCubemap() && IsVideo(tformat) )
                    continue;

                if ( g_TestMedia[index].options & FLAGS_YUV )
                {
                    switch ( static_cast<int>(tformat) )
                    {
                    case DXGI_FORMAT_R32G32B32A32_FLOAT:
                    case DXGI_FORMAT_R16G16B16A16_UNORM:
                    case DXGI_FORMAT_R10G10B10A2_UNORM:
                    case DXGI_FORMAT_R8G8B8A8_UNORM:
                    case DXGI_FORMAT_YUY2:
                    case XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM:
                        break;

                    default:
                        continue;
                    }
                }

                if ( g_TestMedia[index].options & FLAGS_XBOX )
                {
                    switch ( static_cast<int>(tformat) )
                    {
                    case DXGI_FORMAT_R32G32B32A32_FLOAT:
                    case DXGI_FORMAT_R16G16B16A16_UNORM:
                    case DXGI_FORMAT_R10G10B10A2_UNORM:
                    case DXGI_FORMAT_R8G8B8A8_UNORM:
                    case DXGI_FORMAT_B8G8R8X8_UNORM:
                    case XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM:
                        break;

                    default:
                        continue;
                    }
                }

                bool pass = true;

#if defined(_DEBUG) && defined(VERBOSE)
                OutputDebugString( GetName( tformat ) );
                OutputDebugStringA("\n");
#endif

                TEX_FILTER_FLAGS filter = TEX_FILTER_DEFAULT;
                if ( g_TestMedia[index].options & FLAGS_SEPALPHA )
                    filter |= TEX_FILTER_SEPARATE_ALPHA;

                //--- Simple convert --------------------------------------------------
                ScratchImage image;
                hr = Convert( *srcimage.GetImage(0,0,0), tformat, filter, TEX_THRESHOLD_DEFAULT, image );
                if ( FAILED(hr) )
                {
                    success = false;
                    pass = false;
                    printe( "Failed conversion (HRESULT %08X) to %ls:\n%ls\n", static_cast<unsigned int>(hr), GetName( tformat ), szPath );
                }
                else if ( image.GetMetadata().format != tformat
                          || image.GetMetadata().width != srcimage.GetMetadata().width || image.GetMetadata().height != srcimage.GetMetadata().height )
                {
                    success = false;
                    pass = false;
                    printe( "Failed conversion result is %zu x %zu (format %ls):\n",
                            image.GetMetadata().width, image.GetMetadata().height, GetName( image.GetMetadata().format ) );
                    printe( "\n...(check) %zu x %zu (format %ls):\n%ls\n",
                            srcimage.GetMetadata().width, srcimage.GetMetadata().height, GetName( tformat ), szPath );
                }
                else
                {
                    // TODO - Verify the image data (perhaps MD5 checksum)

                    wchar_t tname[MAX_PATH] = {};
                    wcscpy_s( tname, fname );
                    wcscat_s( tname, L"_" );
                    wcscat_s( tname, GetName(tformat) );

                    wchar_t szDestPath[MAX_PATH] = {};
                    _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".dds" );

                    SaveScratchImage( szDestPath, DDS_FLAGS_NONE, image );

#ifdef _DEBUG
                    if ( tformat == DXGI_FORMAT_R1_UNORM )
                    {
                        _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".png" );
                        SaveToWICFile( *image.GetImage(0,0,0), WIC_FLAGS_NONE, GetWICCodec( WIC_CODEC_PNG ), szDestPath );
                    }
#ifndef NO_WMP
                    else if ( tformat == DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM || tformat == DXGI_FORMAT_R16_FLOAT || tformat == DXGI_FORMAT_R16_UNORM || tformat == DXGI_FORMAT_D16_UNORM )
                    {
                        _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".wdp" );
                        SaveToWICFile( *image.GetImage(0,0,0), WIC_FLAGS_NONE, GetWICCodec( WIC_CODEC_WMP ), szDestPath );
                    }
#endif
#endif
                }

                if (FAILED(hr))
                    continue;

                //--- Dither convert --------------------------------------------------
                ScratchImage imageDither;
                ScratchImage imageDitherDiffusion;
                if ( g_TargetFormats[findex].option & FLAGS_DITHER )
                {
                    // Ordered dithering
                    hr = Convert( *srcimage.GetImage(0,0,0), tformat, filter | TEX_FILTER_DITHER, TEX_THRESHOLD_DEFAULT, imageDither );
                    if ( FAILED(hr) )
                    {
                        success = false;
                        pass = false;
                        printe( "Failed DITHER conversion (HRESULT %08X) to %ls:\n%ls\n", static_cast<unsigned int>(hr), GetName( tformat ), szPath );
                    }
                    else if ( imageDither.GetMetadata().format != tformat
                              || imageDither.GetMetadata().width != srcimage.GetMetadata().width || imageDither.GetMetadata().height != srcimage.GetMetadata().height )
                    {
                        success = false;
                        pass = false;
                        printe( "Failed DITHER conversion result is %zu x %zu (format %ls):\n",
                                imageDither.GetMetadata().width, imageDither.GetMetadata().height, GetName( imageDither.GetMetadata().format ) );
                        printe( "\n...(check) %zu x %zu (format %ls):\n%ls\n",
                                srcimage.GetMetadata().width, srcimage.GetMetadata().height, GetName( tformat ), szPath );
                    }
                    else
                    {
                        float mse = 0, mseV[4] = {};
                        float targMSE = ( (BitsPerColor( tformat ) <= 6) && ( BitsPerColor( metadata.format ) >= 16) ) ? 0.03f : 0.002f;
                        if ( g_TargetFormats[findex].option & FLAGS_INTEGER )
                            targMSE = 3.f;
                        else if ( tformat == DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM )
                            targMSE = 0.02f;
                        else if ( tformat == DXGI_FORMAT_B4G4R4A4_UNORM || tformat == XBOX_DXGI_FORMAT_R4G4_UNORM )
                            targMSE = 0.03f;
                        CMSE_FLAGS flags = CMSE_DEFAULT;
                        switch( static_cast<int>(tformat) )
                        {
                        case DXGI_FORMAT_R10G10B10A2_UNORM:
                        case DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM:
                        case DXGI_FORMAT_B5G5R5A1_UNORM:
                        case XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM:
                            flags |= CMSE_IGNORE_ALPHA;
                            break;
                        }
                        const Image* img = image.GetImage(0,0,0);
                        hr = (img) ? ComputeMSE( *img, *imageDither.GetImage(0,0,0), mse, mseV, flags ) : E_POINTER;
                        if ( FAILED(hr) )
                        {
                            success = false;
                            printe( "Failed comparing simple vs. DITHER image data (HRESULT %08X)\n", static_cast<unsigned int>(hr) );
                        }
                        else if ( IsErrorTooLarge( mse, targMSE ) )
                        {
                            success = false;
                            printe( "Failed comparing simple vs. DITHER image data (%f [%f %f %f %f])\nformat %ls -> %ls:\n%ls\n",
                                    mse, mseV[0], mseV[1], mseV[2], mseV[3], GetName( metadata.format), GetName( tformat ), szPath );
                        }

                        wchar_t tname[MAX_PATH] = {};
                        wcscpy_s( tname, fname );
                        wcscat_s( tname, L"_" );
                        wcscat_s( tname, GetName(tformat) );
                        wcscat_s( tname, L"_DITHER" );

                        wchar_t szDestPath[MAX_PATH] = {};
                        _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".dds" );

                        SaveScratchImage( szDestPath, DDS_FLAGS_NONE, imageDither );

#ifdef _DEBUG
                        if ( tformat == DXGI_FORMAT_R1_UNORM )
                        {
                            _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".png" );
                            SaveToWICFile( *imageDither.GetImage(0,0,0), WIC_FLAGS_NONE, GetWICCodec( WIC_CODEC_PNG ), szDestPath );
                        }
#ifndef NO_WMP
                        else if ( tformat == DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM || tformat == DXGI_FORMAT_R16_FLOAT || tformat == DXGI_FORMAT_R16_UNORM || tformat == DXGI_FORMAT_D16_UNORM )
                        {
                            _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".wdp" );
                            SaveToWICFile( *imageDither.GetImage(0,0,0), WIC_FLAGS_NONE, GetWICCodec( WIC_CODEC_WMP ), szDestPath );
                        }
#endif
#endif
                    }

                    // Error diffusion dithering
                    hr = Convert( *srcimage.GetImage(0,0,0), tformat, filter | TEX_FILTER_DITHER_DIFFUSION, TEX_THRESHOLD_DEFAULT, imageDitherDiffusion );
                    if ( FAILED(hr) )
                    {
                        success = false;
                        pass = false;
                        printe( "Failed Diffusion DITHER conversion (HRESULT %08X) to %ls:\n%ls\n", static_cast<unsigned int>(hr), GetName( tformat ), szPath );
                    }
                    else if ( imageDitherDiffusion.GetMetadata().format != tformat
                              || imageDitherDiffusion.GetMetadata().width != srcimage.GetMetadata().width || imageDitherDiffusion.GetMetadata().height != srcimage.GetMetadata().height )
                    {
                        success = false;
                        pass = false;
                        printe( "Failed Diffusion DITHER conversion result is %zu x %zu (format %ls):\n",
                                imageDitherDiffusion.GetMetadata().width, imageDitherDiffusion.GetMetadata().height, GetName( imageDitherDiffusion.GetMetadata().format ) );
                        printe( "\n...(check) %zu x %zu (format %ls):\n%ls\n",
                                srcimage.GetMetadata().width, srcimage.GetMetadata().height, GetName( tformat ), szPath );
                    }
                    else
                    {
                        float mse = 0, mseV[4] = {};
                        float targMSE = ( (BitsPerColor( tformat ) <= 6) && ( BitsPerColor( metadata.format ) >= 16) ) ? 0.03f : 0.003f;
                        if ( g_TargetFormats[findex].option & FLAGS_INTEGER )
                            targMSE = 3.f;
                        else if ( (BitsPerColor( tformat ) <= 4) && ( BitsPerColor( metadata.format ) >= 8) )
                            targMSE = 0.6f;
                        else if ( tformat == DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM )
                            targMSE = 0.4f;
                        CMSE_FLAGS flags = CMSE_DEFAULT;
                        switch( static_cast<int>(tformat) )
                        {
                        case DXGI_FORMAT_R10G10B10A2_UNORM:
                        case DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM:
                        case DXGI_FORMAT_B5G5R5A1_UNORM:
                        case XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM:
                            flags |= CMSE_IGNORE_ALPHA;
                            break;
                        }
                        const Image* img = image.GetImage(0,0,0);
                        hr = (img) ? ComputeMSE( *img, *imageDitherDiffusion.GetImage(0,0,0), mse, mseV, flags ) : E_POINTER;
                        if ( FAILED(hr) )
                        {
                            success = false;
                            printe( "Failed comparing simple vs. Diffusion DITHER image data (HRESULT %08X)\n", static_cast<unsigned int>(hr) );
                        }
                        else if ( IsErrorTooLarge( mse, targMSE ) )
                        {
                            success = false;
                            printe( "Failed comparing simple vs. Diffusion DITHER image data (%f [%f %f %f %f])\nformat %ls -> %ls:\n%ls\n",
                                    mse, mseV[0], mseV[1], mseV[2], mseV[3], GetName( metadata.format), GetName( tformat ), szPath );
                        }

                        wchar_t tname[MAX_PATH] = {};
                        wcscpy_s( tname, fname );
                        wcscat_s( tname, L"_" );
                        wcscat_s( tname, GetName(tformat) );
                        wcscat_s( tname, L"_DIFFUSION_DITHER" );

                        wchar_t szDestPath[MAX_PATH] = {};
                        _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".dds" );

                        SaveScratchImage( szDestPath, DDS_FLAGS_NONE, imageDitherDiffusion );

#ifdef _DEBUG
                        if ( tformat == DXGI_FORMAT_R1_UNORM )
                        {
                            _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".png" );
                            SaveToWICFile( *imageDitherDiffusion.GetImage(0,0,0), WIC_FLAGS_NONE, GetWICCodec( WIC_CODEC_PNG ), szDestPath );
                        }
#ifndef NO_WMP
                        else if ( tformat == DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM || tformat == DXGI_FORMAT_R16_FLOAT || tformat == DXGI_FORMAT_R16_UNORM || tformat == DXGI_FORMAT_D16_UNORM )
                        {
                            _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".wdp" );
                            SaveToWICFile( *imageDitherDiffusion.GetImage(0,0,0), WIC_FLAGS_NONE, GetWICCodec( WIC_CODEC_WMP ), szDestPath );
                        }
#endif
#endif
                    }
                }

// TODO - TEX_FILTER_MIRROR / TEX_FILTER_WRAP (requires TEX_FILTER_LINEAR or TEX_FILTER_CUBIC)

                //--- WIC vs. non-WIC convert -----------------------------------------
                WICPixelFormatGUID pfGUID, targetGUID;
                if ( Internal::DXGIToWIC( metadata.format, pfGUID )
                    && Internal::DXGIToWIC( tformat, targetGUID ) )
                {
                    ScratchImage nwimage;

                    hr = Convert( *srcimage.GetImage(0,0,0), tformat, filter | TEX_FILTER_FORCE_NON_WIC, TEX_THRESHOLD_DEFAULT, nwimage );
                    if ( FAILED(hr) )
                    {
                        success = false;
                        pass = false;
                        printe( "Failed non-WIC conversion (HRESULT %08X) to %ls:\n%ls\n", static_cast<unsigned int>(hr), GetName( tformat ), szPath );
                    }
                    else if ( nwimage.GetMetadata().format != tformat
                              || nwimage.GetMetadata().width != srcimage.GetMetadata().width
                              || nwimage.GetMetadata().height != srcimage.GetMetadata().height )
                    {
                        success = false;
                        pass = false;
                        printe( "Failed non-WIC conversion result is %zu x %zu (format %ls):\n",
                                nwimage.GetMetadata().width, nwimage.GetMetadata().height, GetName( nwimage.GetMetadata().format ) );
                        printe( "\n...(check) %zu x %zu (format %ls):\n%ls\n",
                                srcimage.GetMetadata().width, srcimage.GetMetadata().height, GetName( tformat ), szPath );
                    }
                    else
                    {
                        CMSE_FLAGS flags = CMSE_DEFAULT;
                        float targMSE = 0.01f;

                        switch ( metadata.format )
                        {
                        case DXGI_FORMAT_B8G8R8A8_UNORM:
                            switch( tformat )
                            {
                            case DXGI_FORMAT_R8_UNORM:
                            case DXGI_FORMAT_R16_UNORM:
                                if ( !( filter & TEX_FILTER_SEPARATE_ALPHA ) )
                                    flags |= CMSE_IMAGE1_SRGB;
                                break;
                            }
                            break;
                        }

                        float mse = 0, mseV[4] = {};
                        const Image* img = image.GetImage(0,0,0);
                        hr = (img) ? ComputeMSE( *img, *nwimage.GetImage(0,0,0), mse, mseV, flags ) : E_POINTER;
                        if ( FAILED(hr) )
                        {
                            success = false;
                            printe( "Failed comparing simple vs. non-WIC image data (HRESULT %08X)\n", static_cast<unsigned int>(hr) );
                        }

                        if ( tformat == DXGI_FORMAT_R1_UNORM && SkipMonoCase( metadata.format ) )
                        {
                            // Skip these as they have divergent thresholding behavior
                        }
                        else if ( tformat == DXGI_FORMAT_D16_UNORM || tformat == DXGI_FORMAT_D32_FLOAT )
                        {
                            // Skip these as we don't treat them the same as greyscale in non-WIC paths
                        }
                        else if ( IsErrorTooLarge( mse, targMSE ) )
                        {
                            success = false;
                            printe( "Failed comparing simple vs. non-WIC image data (%f [%f %f %f %f])\nformat %ls -> %ls:\n%ls\n",
                                    mse, mseV[0], mseV[1], mseV[2], mseV[3], GetName( metadata.format), GetName( tformat ), szPath );
                        }

                        wchar_t tname[MAX_PATH] = {};
                        wcscpy_s( tname, fname );
                        wcscat_s( tname, L"_" );
                        wcscat_s( tname, GetName(tformat) );
                        wcscat_s( tname, L"_nowic" );

                        wchar_t szDestPath[MAX_PATH] = {};
                        _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".dds" );

                        SaveToDDSFile( nwimage.GetImages(), nwimage.GetImageCount(), nwimage.GetMetadata(), DDS_FLAGS_NONE, szDestPath );

#ifdef _DEBUG
                        if ( tformat == DXGI_FORMAT_R1_UNORM )
                        {
                            _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".png" );
                            SaveToWICFile( *nwimage.GetImage(0,0,0), WIC_FLAGS_NONE, GetWICCodec( WIC_CODEC_PNG ), szDestPath );
                        }
#ifndef NO_WMP
                        else if ( tformat == DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM || tformat == DXGI_FORMAT_R16_FLOAT || tformat == DXGI_FORMAT_R16_UNORM || tformat == DXGI_FORMAT_D16_UNORM )
                        {
                            _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".wdp" );
                            SaveToWICFile( *nwimage.GetImage(0,0,0), WIC_FLAGS_NONE, GetWICCodec( WIC_CODEC_WMP ), szDestPath );
                        }
#endif
#endif
                    }

                    //--- Dither convert (non-WIC) ------------------------------------

                    // Ordered dithering
                    ScratchImage nwimageDither;
                    hr = Convert( *srcimage.GetImage(0,0,0), tformat, filter | TEX_FILTER_FORCE_NON_WIC | TEX_FILTER_DITHER, TEX_THRESHOLD_DEFAULT, nwimageDither );
                    if ( FAILED(hr) )
                    {
                        success = false;
                        pass = false;
                        printe( "Failed non-WIC DITHER conversion (HRESULT %08X) to %ls:\n%ls\n", static_cast<unsigned int>(hr), GetName( tformat ), szPath );
                    }
                    else if ( nwimageDither.GetMetadata().format != tformat
                              || nwimageDither.GetMetadata().width != srcimage.GetMetadata().width || nwimageDither.GetMetadata().height != srcimage.GetMetadata().height )
                    {
                        success = false;
                        pass = false;
                        printe( "Failed non-WIC DITHER conversion result is %zu x %zu (format %ls):\n",
                                nwimageDither.GetMetadata().width, nwimageDither.GetMetadata().height, GetName( nwimageDither.GetMetadata().format ) );
                        printe( "\n...(check) %zu x %zu (format %ls):\n%ls\n",
                                srcimage.GetMetadata().width, srcimage.GetMetadata().height, GetName( tformat ), szPath );
                    }
                    else
                    {
                        float mse = 0, mseV[4] = {};
                        float targMSE = ( (BitsPerColor( tformat ) <= 6) && ( BitsPerColor( metadata.format ) >= 16) ) ? 0.03f : 0.002f;
                        if ( g_TargetFormats[findex].option & FLAGS_INTEGER )
                            targMSE = 3.f;
                        else if ( tformat == DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM )
                            targMSE = 0.02f;
                        CMSE_FLAGS flags = CMSE_DEFAULT;
                        switch( static_cast<int>(tformat) )
                        {
                        case DXGI_FORMAT_R10G10B10A2_UNORM:
                        case DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM:
                        case DXGI_FORMAT_B5G5R5A1_UNORM:
                        case XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM:
                            flags |= CMSE_IGNORE_ALPHA;
                            break;
                        }
                        const Image* img = nwimage.GetImage(0,0,0);
                        hr = (img) ? ComputeMSE( *img, *nwimageDither.GetImage(0,0,0), mse, mseV, flags ) : E_POINTER;
                        if ( FAILED(hr) )
                        {
                            success = false;
                            printe( "Failed comparing non-WIC simple vs. DITHER image data (HRESULT %08X)\n", static_cast<unsigned int>(hr) );
                        }
                        else if ( IsErrorTooLarge( mse, targMSE ) )
                        {
                            success = false;
                            printe( "Failed comparing non-WIC simple vs. DITHER image data (%f [%f %f %f %f])\nformat %ls -> %ls:\n%ls\n",
                                    mse, mseV[0], mseV[1], mseV[2], mseV[3], GetName( metadata.format), GetName( tformat ), szPath );
                        }

                        wchar_t tname[MAX_PATH] = {};
                        wcscpy_s( tname, fname );
                        wcscat_s( tname, L"_" );
                        wcscat_s( tname, GetName(tformat) );
                        wcscat_s( tname, L"_DITHER_nowic" );

                        wchar_t szDestPath[MAX_PATH] = {};
                        _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".dds" );

                        SaveScratchImage( szDestPath, DDS_FLAGS_NONE, nwimageDither );

#ifdef _DEBUG
                        if ( tformat == DXGI_FORMAT_R1_UNORM )
                        {
                            _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".png" );
                            SaveToWICFile( *nwimageDither.GetImage(0,0,0), WIC_FLAGS_NONE, GetWICCodec( WIC_CODEC_PNG ), szDestPath );
                        }
#ifndef NO_WMP
                        else if ( tformat == DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM || tformat == DXGI_FORMAT_R16_FLOAT || tformat == DXGI_FORMAT_R16_UNORM || tformat == DXGI_FORMAT_D16_UNORM )
                        {
                            _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".wdp" );
                            SaveToWICFile( *nwimageDither.GetImage(0,0,0), WIC_FLAGS_NONE, GetWICCodec( WIC_CODEC_WMP ), szDestPath );
                        }
#endif
#endif
                    }

                    // Error diffusion dithering
                    ScratchImage nwimageDitherDiffusion;
                    hr = Convert( *srcimage.GetImage(0,0,0), tformat, filter | TEX_FILTER_FORCE_NON_WIC | TEX_FILTER_DITHER_DIFFUSION, TEX_THRESHOLD_DEFAULT, nwimageDitherDiffusion );
                    if ( FAILED(hr) )
                    {
                        success = false;
                        pass = false;
                        printe( "Failed non-WIC Diffusion DITHER conversion (HRESULT %08X) to %ls:\n%ls\n", static_cast<unsigned int>(hr), GetName( tformat ), szPath );
                    }
                    else if ( nwimageDitherDiffusion.GetMetadata().format != tformat
                              || nwimageDitherDiffusion.GetMetadata().width != srcimage.GetMetadata().width || nwimageDitherDiffusion.GetMetadata().height != srcimage.GetMetadata().height )
                    {
                        success = false;
                        pass = false;
                        printe( "Failed non-WIC Diffusion DITHER conversion result is %zu x %zu (format %ls):\n",
                                nwimageDitherDiffusion.GetMetadata().width, nwimageDitherDiffusion.GetMetadata().height, GetName( nwimageDitherDiffusion.GetMetadata().format ) );
                        printe( "\n...(check) %zu x %zu (format %ls):\n%ls\n",
                                srcimage.GetMetadata().width, srcimage.GetMetadata().height, GetName( tformat ), szPath );
                    }
                    else
                    {
                        float mse = 0, mseV[4] = {};
                        float targMSE = ( (BitsPerColor( tformat ) <= 6) && ( BitsPerColor( metadata.format ) >= 16) ) ? 0.03f : 0.003f;
                        if ( g_TargetFormats[findex].option & FLAGS_INTEGER )
                            targMSE = 3.f;
                        else if ( (BitsPerColor( tformat ) <= 4) && ( BitsPerColor( metadata.format ) >= 8) )
                            targMSE = 0.6f;
                        else if ( tformat == DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM )
                            targMSE = 0.4f;
                        CMSE_FLAGS flags = CMSE_DEFAULT;
                        switch( static_cast<int>(tformat) )
                        {
                        case DXGI_FORMAT_R10G10B10A2_UNORM:
                        case DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM:
                        case DXGI_FORMAT_B5G5R5A1_UNORM:
                        case XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM:
                            flags |= CMSE_IGNORE_ALPHA;
                            break;
                        }
                        const Image* img = nwimage.GetImage(0,0,0);
                        hr = (img) ? ComputeMSE( *img, *nwimageDitherDiffusion.GetImage(0,0,0), mse, mseV, flags ) : E_POINTER;
                        if ( FAILED(hr) )
                        {
                            success = false;
                            printe( "Failed comparing non-WIC simple vs. Diffusion DITHER image data (HRESULT %08X)\n", static_cast<unsigned int>(hr) );
                        }
                        else if ( IsErrorTooLarge( mse, targMSE ) )
                        {
                            success = false;
                            printe( "Failed non-WIC comparing simple vs. Diffusion DITHER image data (%f [%f %f %f %f])\nformat %ls -> %ls:\n%ls\n",
                                    mse, mseV[0], mseV[1], mseV[2], mseV[3], GetName( metadata.format), GetName( tformat ), szPath );
                        }

                        wchar_t tname[MAX_PATH] = {};
                        wcscpy_s( tname, fname );
                        wcscat_s( tname, L"_" );
                        wcscat_s( tname, GetName(tformat) );
                        wcscat_s( tname, L"_DIFFUSION_DITHER_nowic" );

                        wchar_t szDestPath[MAX_PATH] = {};
                        _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".dds" );

                        SaveScratchImage( szDestPath, DDS_FLAGS_NONE, nwimageDitherDiffusion );

#ifdef _DEBUG
                        if ( tformat == DXGI_FORMAT_R1_UNORM )
                        {
                            _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".png" );
                            SaveToWICFile( *nwimageDitherDiffusion.GetImage(0,0,0), WIC_FLAGS_NONE, GetWICCodec( WIC_CODEC_PNG ), szDestPath );
                        }
#ifndef NO_WMP
                        else if ( tformat == DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM || tformat == DXGI_FORMAT_R16_FLOAT || tformat == DXGI_FORMAT_R16_UNORM || tformat == DXGI_FORMAT_D16_UNORM )
                        {
                            _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".wdp" );
                            SaveToWICFile( *nwimageDitherDiffusion.GetImage(0,0,0), WIC_FLAGS_NONE, GetWICCodec( WIC_CODEC_WMP ), szDestPath );
                        }
#endif
#endif
                    }
                }

                //--- SRGB convert ----------------------------------------------------
                if (IsSRGB(tformat) || IsSRGB(metadata.format))
                {
                    CMSE_FLAGS flags = CMSE_DEFAULT;
                    float targMSE = 0.001f;

                    if (HasAlpha(metadata.format) != HasAlpha(tformat))
                    {
                        flags |= CMSE_IGNORE_ALPHA;
                    }

                    switch (metadata.format)
                    {
                    case DXGI_FORMAT_R1_UNORM:
                        targMSE = 0.01f;
                        flags |= CMSE_IGNORE_GREEN | CMSE_IGNORE_BLUE | CMSE_IGNORE_ALPHA;
                        break;

                    case DXGI_FORMAT_R8_UNORM:
                    case DXGI_FORMAT_R16_UNORM:
                        flags |= CMSE_IGNORE_GREEN | CMSE_IGNORE_BLUE | CMSE_IGNORE_ALPHA;
                        break;

                    case DXGI_FORMAT_A8_UNORM:
                        flags |= CMSE_IGNORE_RED | CMSE_IGNORE_GREEN | CMSE_IGNORE_BLUE;
                        break;

                    case DXGI_FORMAT_R32G32B32A32_FLOAT:
                    case DXGI_FORMAT_R32G32B32A32_UINT:
                    case DXGI_FORMAT_R32G32B32A32_SINT:
                    case DXGI_FORMAT_R32G32B32_FLOAT:
                    case DXGI_FORMAT_R32G32B32_UINT:
                    case DXGI_FORMAT_R32G32B32_SINT:
                    case DXGI_FORMAT_R16G16B16A16_FLOAT:
                    case DXGI_FORMAT_R16G16B16A16_UINT:
                    case DXGI_FORMAT_R16G16B16A16_SNORM:
                    case DXGI_FORMAT_R16G16B16A16_SINT:
                    case DXGI_FORMAT_R32G32_FLOAT:
                    case DXGI_FORMAT_R32G32_UINT:
                    case DXGI_FORMAT_R32G32_SINT:
                    case DXGI_FORMAT_R10G10B10A2_UINT:
                    case DXGI_FORMAT_R8G8B8A8_UINT:
                    case DXGI_FORMAT_R8G8B8A8_SNORM:
                    case DXGI_FORMAT_R8G8B8A8_SINT:
                    case DXGI_FORMAT_R16G16_FLOAT:
                    case DXGI_FORMAT_R16G16_UINT:
                    case DXGI_FORMAT_R16G16_SNORM:
                    case DXGI_FORMAT_R16G16_SINT:
                    case DXGI_FORMAT_R8G8_UINT:
                    case DXGI_FORMAT_R8G8_SNORM:
                    case DXGI_FORMAT_R8G8_SINT:
                    case DXGI_FORMAT_R16_FLOAT:
                    case DXGI_FORMAT_R16_UINT:
                    case DXGI_FORMAT_R16_SNORM:
                    case DXGI_FORMAT_R16_SINT:
                    case DXGI_FORMAT_R8_UINT:
                    case DXGI_FORMAT_R8_SNORM:
                    case DXGI_FORMAT_R8_SINT:
                    case DXGI_FORMAT_R32_FLOAT:
                        // These types are too different to really directly compare...
                        flags = static_cast<CMSE_FLAGS>(-1);
                        break;
                    }

                    switch (static_cast<int>(tformat))
                    {
                    case DXGI_FORMAT_R8_UNORM:
                    case DXGI_FORMAT_R16_UNORM:
                        targMSE = 0.004f;
                        flags |= CMSE_IGNORE_GREEN | CMSE_IGNORE_BLUE | CMSE_IGNORE_ALPHA;
                        break;

                    case DXGI_FORMAT_A8_UNORM:
                        flags |= CMSE_IGNORE_RED | CMSE_IGNORE_GREEN | CMSE_IGNORE_BLUE;
                        break;

                    case DXGI_FORMAT_R8G8_UNORM:
                    case DXGI_FORMAT_R16G16_UNORM:
                    case DXGI_FORMAT_R16G16_FLOAT:
                    case DXGI_FORMAT_R32G32_FLOAT:
                    case XBOX_DXGI_FORMAT_R4G4_UNORM:
                        flags |= CMSE_IGNORE_BLUE | CMSE_IGNORE_ALPHA;
                        break;

                    case DXGI_FORMAT_B5G5R5A1_UNORM:
                        targMSE = 0.003f;
                        break;

                    case DXGI_FORMAT_R32G32B32A32_UINT:
                    case DXGI_FORMAT_R32G32B32A32_SINT:
                    case DXGI_FORMAT_R32G32B32_UINT:
                    case DXGI_FORMAT_R32G32B32_SINT:
                    case DXGI_FORMAT_R16G16B16A16_UINT:
                    case DXGI_FORMAT_R16G16B16A16_SNORM:
                    case DXGI_FORMAT_R16G16B16A16_SINT:
                    case DXGI_FORMAT_R8G8B8A8_SNORM:
                    case DXGI_FORMAT_R32G32_UINT:
                    case DXGI_FORMAT_R32G32_SINT:
                    case DXGI_FORMAT_R10G10B10A2_UINT:
                    case DXGI_FORMAT_R8G8B8A8_UINT:
                    case DXGI_FORMAT_R8G8B8A8_SINT:
                    case DXGI_FORMAT_R16G16_UINT:
                    case DXGI_FORMAT_R16G16_SNORM:
                    case DXGI_FORMAT_R16G16_SINT:
                    case DXGI_FORMAT_R32_FLOAT:
                    case DXGI_FORMAT_D32_FLOAT:
                    case DXGI_FORMAT_R32_UINT:
                    case DXGI_FORMAT_R32_SINT:
                    case DXGI_FORMAT_R8G8_UINT:
                    case DXGI_FORMAT_R8G8_SINT:
                    case DXGI_FORMAT_R8G8_SNORM:
                    case DXGI_FORMAT_D16_UNORM:
                    case DXGI_FORMAT_R16_FLOAT:
                    case DXGI_FORMAT_R16_UINT:
                    case DXGI_FORMAT_R16_SNORM:
                    case DXGI_FORMAT_R16_SINT:
                    case DXGI_FORMAT_R8_UINT:
                    case DXGI_FORMAT_R8_SNORM:
                    case DXGI_FORMAT_R8_SINT:
                    case DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
                    case DXGI_FORMAT_D24_UNORM_S8_UINT:
                    case DXGI_FORMAT_R9G9B9E5_SHAREDEXP:
                    case DXGI_FORMAT_G8R8_G8B8_UNORM:
                    case DXGI_FORMAT_R8G8_B8G8_UNORM:
                    case DXGI_FORMAT_R1_UNORM:
                    case DXGI_FORMAT_Y410:
                    case DXGI_FORMAT_Y416:
                    case DXGI_FORMAT_Y210:
                    case DXGI_FORMAT_Y216:
                    case XBOX_DXGI_FORMAT_R10G10B10_SNORM_A2_UNORM:
                        // These types are too different to really directly compare...
                        flags = static_cast<CMSE_FLAGS>(-1);
                        break;
                    }

                    if (flags != static_cast<CMSE_FLAGS>(-1))
                    {
                        float mse, mseV[4];
                        hr = ComputeMSE(*srcimage.GetImage(0, 0, 0), *image.GetImage(0, 0, 0), mse, mseV, flags);
                        if (FAILED(hr))
                        {
                            success = false;
                            printe("Failed comparing sRGB vs. RGB image data (HRESULT %08X)\n", static_cast<unsigned int>(hr));
                        }

                        if (IsErrorTooLarge(mse, targMSE))
                        {
                            success = false;
                            printe("Failed comparing sRGB vs. RGB image data (%f [%f %f %f %f])\nformat %ls -> %ls:\n%ls\n",
                                mse, mseV[0], mseV[1], mseV[2], mseV[3], GetName(metadata.format), GetName(tformat), szPath);
                        }
                    }
                }

                {
                    ScratchImage image2;
                    hr = Convert(*srcimage.GetImage(0, 0, 0), tformat, TEX_FILTER_FLOAT_X2BIAS, TEX_THRESHOLD_DEFAULT, image2);
                    if (FAILED(hr))
                    {
                        success = false;
                        pass = false;
                        printe("Failed conversion x2 bias (HRESULT %08X) to %ls:\n%ls\n", static_cast<unsigned int>(hr), GetName(tformat), szPath);
                    }
                    else if (image2.GetMetadata().format != tformat
                        || image2.GetMetadata().width != srcimage.GetMetadata().width || image2.GetMetadata().height != srcimage.GetMetadata().height)
                    {
                        success = false;
                        pass = false;
                        printe("Failed conversion result x2 bias is %zu x %zu (format %ls):\n",
                            image2.GetMetadata().width, image2.GetMetadata().height, GetName(image2.GetMetadata().format));
                        printe("\n...(check) %zu x %zu (format %ls):\n%ls\n",
                            srcimage.GetMetadata().width, srcimage.GetMetadata().height, GetName(tformat), szPath);
                    }
                    else
                    {
                        // TODO - Verify the image data (perhaps MD5 checksum)

                        wchar_t tname[MAX_PATH] = {};
                        wcscpy_s(tname, fname);
                        wcscat_s(tname, L"_");
                        wcscat_s(tname, GetName(tformat));
                        wcscat_s(tname, L"_x2bias");

                        wchar_t szDestPath[MAX_PATH] = {};
                        _wmakepath_s(szDestPath, MAX_PATH, nullptr, tempDir, tname, L".dds");

                        SaveScratchImage(szDestPath, DDS_FLAGS_NONE, image2);
                    }
                }

                //--- Complex convert -------------------------------------------------
                if ( srcimage.GetImageCount() > 1 )
                {
                    ScratchImage imageComplex;
                    hr = Convert( srcimage.GetImages(), srcimage.GetImageCount(), srcimage.GetMetadata(), tformat, filter, TEX_THRESHOLD_DEFAULT, imageComplex );
                    if ( FAILED(hr) )
                    {
                        success = false;
                        pass = false;
                        printe( "Failed convert complex (HRESULT %08X) to %ls:\n%ls\n", static_cast<unsigned int>(hr), GetName( tformat ), szPath );
                    }
                    else
                    {
                        const TexMetadata& metadata2 = imageComplex.GetMetadata();

                        if ( metadata2.width != check->width
                             || metadata2.height != check->height
                             || metadata2.mipLevels != check->mipLevels
                             || metadata2.depth != check->depth
                             || metadata2.arraySize != check->arraySize
                             || metadata2.miscFlags != check->miscFlags
                             || metadata2.format != tformat
                             || metadata2.dimension != check->dimension )
                        {
                            success = false;
                            pass = false;
                            printe( "Failed convert complex result:\n%ls\n", szPath );
                            printmeta( &metadata2 );
                            printmetachk( check );
                        }
                        else
                        {
                            // Compare top-level image with simple case result
                            float mse = 0, mseV[4] = {};
                            const Image* img = image.GetImage(0,0,0);
                            hr = (img) ? ComputeMSE( *img, *imageComplex.GetImage(0,0,0), mse, mseV ) : E_POINTER;
                            if ( FAILED(hr) )
                            {
                                success = false;
                                printe( "Failed comparing simple vs. complex image data (HRESULT %08X)\n", static_cast<unsigned int>(hr) );
                            }

                            if ( IsErrorTooLarge( mse, 0.00001f ) )
                            {
                                success = false;
                                printe( "Failed comparing simple vs. complex image data (%f [%f %f %f %f]):\nformat %ls -> %ls:\n%ls\n",
                                        mse, mseV[0], mseV[1], mseV[2], mseV[3], GetName(metadata.format), GetName( tformat ), szPath );
                            }

                            // TODO - Verify the image chain data (perhaps MD5 checksum)

                            wchar_t tname[MAX_PATH] = {};
                            wcscpy_s( tname, fname );
                            wcscat_s( tname, L"_" );
                            wcscat_s( tname, GetName(tformat) );
                            wcscat_s( tname, L"_complex" );

                            wchar_t szDestPath[MAX_PATH] = {};
                            _wmakepath_s( szDestPath, MAX_PATH, nullptr, tempDir, tname, L".dds" );

                            SaveToDDSFile( imageComplex.GetImages(), imageComplex.GetImageCount(), imageComplex.GetMetadata(), DDS_FLAGS_NONE, szDestPath );
                        }
                    }
                }

                if ( pass )
                    ++npass;

                ++ncount;
            }
        }
    }

    print("\n%zu images tested, %zu images passed (%zu images by %zu formats) ", ncount, npass, std::size(g_TestMedia), std::size(g_TargetFormats) );

    return success;
}
